/* Auto-generated by genmsg_cpp for file /home/mcube/hands_MLab/code/nodes/hand/ROS/hand_comm/msg/hand_ForcesLog.msg */
#ifndef HAND_COMM_MESSAGE_HAND_FORCESLOG_H
#define HAND_COMM_MESSAGE_HAND_FORCESLOG_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace hand_comm
{
template <class ContainerAllocator>
struct hand_ForcesLog_ {
  typedef hand_ForcesLog_<ContainerAllocator> Type;

  hand_ForcesLog_()
  : timeStamp(0.0)
  , forces()
  {
  }

  hand_ForcesLog_(const ContainerAllocator& _alloc)
  : timeStamp(0.0)
  , forces(_alloc)
  {
  }

  typedef double _timeStamp_type;
  double timeStamp;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _forces_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  forces;


  typedef boost::shared_ptr< ::hand_comm::hand_ForcesLog_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hand_comm::hand_ForcesLog_<ContainerAllocator>  const> ConstPtr;
}; // struct hand_ForcesLog
typedef  ::hand_comm::hand_ForcesLog_<std::allocator<void> > hand_ForcesLog;

typedef boost::shared_ptr< ::hand_comm::hand_ForcesLog> hand_ForcesLogPtr;
typedef boost::shared_ptr< ::hand_comm::hand_ForcesLog const> hand_ForcesLogConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::hand_comm::hand_ForcesLog_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::hand_comm::hand_ForcesLog_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace hand_comm

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::hand_comm::hand_ForcesLog_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::hand_comm::hand_ForcesLog_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::hand_comm::hand_ForcesLog_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3dea637dd46fc45b51477a159c3698a9";
  }

  static const char* value(const  ::hand_comm::hand_ForcesLog_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x3dea637dd46fc45bULL;
  static const uint64_t static_value2 = 0x51477a159c3698a9ULL;
};

template<class ContainerAllocator>
struct DataType< ::hand_comm::hand_ForcesLog_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hand_comm/hand_ForcesLog";
  }

  static const char* value(const  ::hand_comm::hand_ForcesLog_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::hand_comm::hand_ForcesLog_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64 timeStamp      # ROS time-stamp\n\
float64[] forces        # Calibrated force values\n\
\n\
";
  }

  static const char* value(const  ::hand_comm::hand_ForcesLog_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::hand_comm::hand_ForcesLog_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.timeStamp);
    stream.next(m.forces);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct hand_ForcesLog_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hand_comm::hand_ForcesLog_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::hand_comm::hand_ForcesLog_<ContainerAllocator> & v) 
  {
    s << indent << "timeStamp: ";
    Printer<double>::stream(s, indent + "  ", v.timeStamp);
    s << indent << "forces[]" << std::endl;
    for (size_t i = 0; i < v.forces.size(); ++i)
    {
      s << indent << "  forces[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.forces[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // HAND_COMM_MESSAGE_HAND_FORCESLOG_H

