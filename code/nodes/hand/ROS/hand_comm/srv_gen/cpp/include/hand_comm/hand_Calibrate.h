/* Auto-generated by genmsg_cpp for file /home/mcube/hands_MLab/code/nodes/hand/ROS/hand_comm/srv/hand_Calibrate.srv */
#ifndef HAND_COMM_SERVICE_HAND_CALIBRATE_H
#define HAND_COMM_SERVICE_HAND_CALIBRATE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace hand_comm
{
template <class ContainerAllocator>
struct hand_CalibrateRequest_ {
  typedef hand_CalibrateRequest_<ContainerAllocator> Type;

  hand_CalibrateRequest_()
  : fast(0)
  {
  }

  hand_CalibrateRequest_(const ContainerAllocator& _alloc)
  : fast(0)
  {
  }

  typedef int64_t _fast_type;
  int64_t fast;


  typedef boost::shared_ptr< ::hand_comm::hand_CalibrateRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hand_comm::hand_CalibrateRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct hand_CalibrateRequest
typedef  ::hand_comm::hand_CalibrateRequest_<std::allocator<void> > hand_CalibrateRequest;

typedef boost::shared_ptr< ::hand_comm::hand_CalibrateRequest> hand_CalibrateRequestPtr;
typedef boost::shared_ptr< ::hand_comm::hand_CalibrateRequest const> hand_CalibrateRequestConstPtr;



template <class ContainerAllocator>
struct hand_CalibrateResponse_ {
  typedef hand_CalibrateResponse_<ContainerAllocator> Type;

  hand_CalibrateResponse_()
  : encMotor(0)
  , enc()
  , ret(0)
  , msg()
  {
  }

  hand_CalibrateResponse_(const ContainerAllocator& _alloc)
  : encMotor(0)
  , enc(_alloc)
  , ret(0)
  , msg(_alloc)
  {
  }

  typedef int64_t _encMotor_type;
  int64_t encMotor;

  typedef std::vector<int64_t, typename ContainerAllocator::template rebind<int64_t>::other >  _enc_type;
  std::vector<int64_t, typename ContainerAllocator::template rebind<int64_t>::other >  enc;

  typedef int64_t _ret_type;
  int64_t ret;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _msg_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  msg;


  typedef boost::shared_ptr< ::hand_comm::hand_CalibrateResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hand_comm::hand_CalibrateResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct hand_CalibrateResponse
typedef  ::hand_comm::hand_CalibrateResponse_<std::allocator<void> > hand_CalibrateResponse;

typedef boost::shared_ptr< ::hand_comm::hand_CalibrateResponse> hand_CalibrateResponsePtr;
typedef boost::shared_ptr< ::hand_comm::hand_CalibrateResponse const> hand_CalibrateResponseConstPtr;


struct hand_Calibrate
{

typedef hand_CalibrateRequest Request;
typedef hand_CalibrateResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct hand_Calibrate
} // namespace hand_comm

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::hand_comm::hand_CalibrateRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::hand_comm::hand_CalibrateRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::hand_comm::hand_CalibrateRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "dc0aab9a5c4f2ba7d6a524b9dcdb6075";
  }

  static const char* value(const  ::hand_comm::hand_CalibrateRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xdc0aab9a5c4f2ba7ULL;
  static const uint64_t static_value2 = 0xd6a524b9dcdb6075ULL;
};

template<class ContainerAllocator>
struct DataType< ::hand_comm::hand_CalibrateRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hand_comm/hand_CalibrateRequest";
  }

  static const char* value(const  ::hand_comm::hand_CalibrateRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::hand_comm::hand_CalibrateRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
int64 fast\n\
\n\
";
  }

  static const char* value(const  ::hand_comm::hand_CalibrateRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::hand_comm::hand_CalibrateRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::hand_comm::hand_CalibrateResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::hand_comm::hand_CalibrateResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::hand_comm::hand_CalibrateResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6a1fcb2d82a956624d0e9728eaa42bd8";
  }

  static const char* value(const  ::hand_comm::hand_CalibrateResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x6a1fcb2d82a95662ULL;
  static const uint64_t static_value2 = 0x4d0e9728eaa42bd8ULL;
};

template<class ContainerAllocator>
struct DataType< ::hand_comm::hand_CalibrateResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hand_comm/hand_CalibrateResponse";
  }

  static const char* value(const  ::hand_comm::hand_CalibrateResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::hand_comm::hand_CalibrateResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int64 encMotor\n\
int64[] enc\n\
int64 ret\n\
string msg\n\
\n\
\n\
";
  }

  static const char* value(const  ::hand_comm::hand_CalibrateResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::hand_comm::hand_CalibrateRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.fast);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct hand_CalibrateRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::hand_comm::hand_CalibrateResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.encMotor);
    stream.next(m.enc);
    stream.next(m.ret);
    stream.next(m.msg);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct hand_CalibrateResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<hand_comm::hand_Calibrate> {
  static const char* value() 
  {
    return "d6c38a4fb72a1974bd045ec6a012aa05";
  }

  static const char* value(const hand_comm::hand_Calibrate&) { return value(); } 
};

template<>
struct DataType<hand_comm::hand_Calibrate> {
  static const char* value() 
  {
    return "hand_comm/hand_Calibrate";
  }

  static const char* value(const hand_comm::hand_Calibrate&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<hand_comm::hand_CalibrateRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d6c38a4fb72a1974bd045ec6a012aa05";
  }

  static const char* value(const hand_comm::hand_CalibrateRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<hand_comm::hand_CalibrateRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hand_comm/hand_Calibrate";
  }

  static const char* value(const hand_comm::hand_CalibrateRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<hand_comm::hand_CalibrateResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d6c38a4fb72a1974bd045ec6a012aa05";
  }

  static const char* value(const hand_comm::hand_CalibrateResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<hand_comm::hand_CalibrateResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hand_comm/hand_Calibrate";
  }

  static const char* value(const hand_comm::hand_CalibrateResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // HAND_COMM_SERVICE_HAND_CALIBRATE_H

