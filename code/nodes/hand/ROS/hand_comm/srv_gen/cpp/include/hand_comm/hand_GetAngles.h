/* Auto-generated by genmsg_cpp for file /home/mcube/hands_MLab/code/nodes/hand/ROS/hand_comm/srv/hand_GetAngles.srv */
#ifndef HAND_COMM_SERVICE_HAND_GETANGLES_H
#define HAND_COMM_SERVICE_HAND_GETANGLES_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace hand_comm
{
template <class ContainerAllocator>
struct hand_GetAnglesRequest_ {
  typedef hand_GetAnglesRequest_<ContainerAllocator> Type;

  hand_GetAnglesRequest_()
  {
  }

  hand_GetAnglesRequest_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::hand_comm::hand_GetAnglesRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hand_comm::hand_GetAnglesRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct hand_GetAnglesRequest
typedef  ::hand_comm::hand_GetAnglesRequest_<std::allocator<void> > hand_GetAnglesRequest;

typedef boost::shared_ptr< ::hand_comm::hand_GetAnglesRequest> hand_GetAnglesRequestPtr;
typedef boost::shared_ptr< ::hand_comm::hand_GetAnglesRequest const> hand_GetAnglesRequestConstPtr;



template <class ContainerAllocator>
struct hand_GetAnglesResponse_ {
  typedef hand_GetAnglesResponse_<ContainerAllocator> Type;

  hand_GetAnglesResponse_()
  : angleMotor(0.0)
  , angle()
  , ret(0)
  , msg()
  {
  }

  hand_GetAnglesResponse_(const ContainerAllocator& _alloc)
  : angleMotor(0.0)
  , angle(_alloc)
  , ret(0)
  , msg(_alloc)
  {
  }

  typedef double _angleMotor_type;
  double angleMotor;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _angle_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  angle;

  typedef int64_t _ret_type;
  int64_t ret;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _msg_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  msg;


  typedef boost::shared_ptr< ::hand_comm::hand_GetAnglesResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hand_comm::hand_GetAnglesResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct hand_GetAnglesResponse
typedef  ::hand_comm::hand_GetAnglesResponse_<std::allocator<void> > hand_GetAnglesResponse;

typedef boost::shared_ptr< ::hand_comm::hand_GetAnglesResponse> hand_GetAnglesResponsePtr;
typedef boost::shared_ptr< ::hand_comm::hand_GetAnglesResponse const> hand_GetAnglesResponseConstPtr;


struct hand_GetAngles
{

typedef hand_GetAnglesRequest Request;
typedef hand_GetAnglesResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct hand_GetAngles
} // namespace hand_comm

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::hand_comm::hand_GetAnglesRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::hand_comm::hand_GetAnglesRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::hand_comm::hand_GetAnglesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::hand_comm::hand_GetAnglesRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::hand_comm::hand_GetAnglesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hand_comm/hand_GetAnglesRequest";
  }

  static const char* value(const  ::hand_comm::hand_GetAnglesRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::hand_comm::hand_GetAnglesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
\n\
";
  }

  static const char* value(const  ::hand_comm::hand_GetAnglesRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::hand_comm::hand_GetAnglesRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::hand_comm::hand_GetAnglesResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::hand_comm::hand_GetAnglesResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::hand_comm::hand_GetAnglesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ff2c8d4d74f24b71621474b55e66fc31";
  }

  static const char* value(const  ::hand_comm::hand_GetAnglesResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xff2c8d4d74f24b71ULL;
  static const uint64_t static_value2 = 0x621474b55e66fc31ULL;
};

template<class ContainerAllocator>
struct DataType< ::hand_comm::hand_GetAnglesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hand_comm/hand_GetAnglesResponse";
  }

  static const char* value(const  ::hand_comm::hand_GetAnglesResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::hand_comm::hand_GetAnglesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64 angleMotor\n\
float64[] angle\n\
int64 ret\n\
string msg\n\
\n\
\n\
";
  }

  static const char* value(const  ::hand_comm::hand_GetAnglesResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::hand_comm::hand_GetAnglesRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct hand_GetAnglesRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::hand_comm::hand_GetAnglesResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.angleMotor);
    stream.next(m.angle);
    stream.next(m.ret);
    stream.next(m.msg);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct hand_GetAnglesResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<hand_comm::hand_GetAngles> {
  static const char* value() 
  {
    return "ff2c8d4d74f24b71621474b55e66fc31";
  }

  static const char* value(const hand_comm::hand_GetAngles&) { return value(); } 
};

template<>
struct DataType<hand_comm::hand_GetAngles> {
  static const char* value() 
  {
    return "hand_comm/hand_GetAngles";
  }

  static const char* value(const hand_comm::hand_GetAngles&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<hand_comm::hand_GetAnglesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ff2c8d4d74f24b71621474b55e66fc31";
  }

  static const char* value(const hand_comm::hand_GetAnglesRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<hand_comm::hand_GetAnglesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hand_comm/hand_GetAngles";
  }

  static const char* value(const hand_comm::hand_GetAnglesRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<hand_comm::hand_GetAnglesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ff2c8d4d74f24b71621474b55e66fc31";
  }

  static const char* value(const hand_comm::hand_GetAnglesResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<hand_comm::hand_GetAnglesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hand_comm/hand_GetAngles";
  }

  static const char* value(const hand_comm::hand_GetAnglesResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // HAND_COMM_SERVICE_HAND_GETANGLES_H

