/* Auto-generated by genmsg_cpp for file /home/mcube/hands_MLab/code/nodes/hand/ROS/hand_comm/srv/hand_SetAngle.srv */
#ifndef HAND_COMM_SERVICE_HAND_SETANGLE_H
#define HAND_COMM_SERVICE_HAND_SETANGLE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace hand_comm
{
template <class ContainerAllocator>
struct hand_SetAngleRequest_ {
  typedef hand_SetAngleRequest_<ContainerAllocator> Type;

  hand_SetAngleRequest_()
  : angle(0.0)
  {
  }

  hand_SetAngleRequest_(const ContainerAllocator& _alloc)
  : angle(0.0)
  {
  }

  typedef double _angle_type;
  double angle;


  typedef boost::shared_ptr< ::hand_comm::hand_SetAngleRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hand_comm::hand_SetAngleRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct hand_SetAngleRequest
typedef  ::hand_comm::hand_SetAngleRequest_<std::allocator<void> > hand_SetAngleRequest;

typedef boost::shared_ptr< ::hand_comm::hand_SetAngleRequest> hand_SetAngleRequestPtr;
typedef boost::shared_ptr< ::hand_comm::hand_SetAngleRequest const> hand_SetAngleRequestConstPtr;



template <class ContainerAllocator>
struct hand_SetAngleResponse_ {
  typedef hand_SetAngleResponse_<ContainerAllocator> Type;

  hand_SetAngleResponse_()
  : ret(0)
  , msg()
  {
  }

  hand_SetAngleResponse_(const ContainerAllocator& _alloc)
  : ret(0)
  , msg(_alloc)
  {
  }

  typedef int64_t _ret_type;
  int64_t ret;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _msg_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  msg;


  typedef boost::shared_ptr< ::hand_comm::hand_SetAngleResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hand_comm::hand_SetAngleResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct hand_SetAngleResponse
typedef  ::hand_comm::hand_SetAngleResponse_<std::allocator<void> > hand_SetAngleResponse;

typedef boost::shared_ptr< ::hand_comm::hand_SetAngleResponse> hand_SetAngleResponsePtr;
typedef boost::shared_ptr< ::hand_comm::hand_SetAngleResponse const> hand_SetAngleResponseConstPtr;


struct hand_SetAngle
{

typedef hand_SetAngleRequest Request;
typedef hand_SetAngleResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct hand_SetAngle
} // namespace hand_comm

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::hand_comm::hand_SetAngleRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::hand_comm::hand_SetAngleRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::hand_comm::hand_SetAngleRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4edb55038e2b888976a0c0c56935341c";
  }

  static const char* value(const  ::hand_comm::hand_SetAngleRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x4edb55038e2b8889ULL;
  static const uint64_t static_value2 = 0x76a0c0c56935341cULL;
};

template<class ContainerAllocator>
struct DataType< ::hand_comm::hand_SetAngleRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hand_comm/hand_SetAngleRequest";
  }

  static const char* value(const  ::hand_comm::hand_SetAngleRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::hand_comm::hand_SetAngleRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
float64 angle\n\
\n\
\n\
";
  }

  static const char* value(const  ::hand_comm::hand_SetAngleRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::hand_comm::hand_SetAngleRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::hand_comm::hand_SetAngleResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::hand_comm::hand_SetAngleResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::hand_comm::hand_SetAngleResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1e32786be6359fbbb6259aee4f579d10";
  }

  static const char* value(const  ::hand_comm::hand_SetAngleResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x1e32786be6359fbbULL;
  static const uint64_t static_value2 = 0xb6259aee4f579d10ULL;
};

template<class ContainerAllocator>
struct DataType< ::hand_comm::hand_SetAngleResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hand_comm/hand_SetAngleResponse";
  }

  static const char* value(const  ::hand_comm::hand_SetAngleResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::hand_comm::hand_SetAngleResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int64 ret\n\
string msg\n\
\n\
";
  }

  static const char* value(const  ::hand_comm::hand_SetAngleResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::hand_comm::hand_SetAngleRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.angle);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct hand_SetAngleRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::hand_comm::hand_SetAngleResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.ret);
    stream.next(m.msg);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct hand_SetAngleResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<hand_comm::hand_SetAngle> {
  static const char* value() 
  {
    return "2af98a0f7367c07e91d2380026087984";
  }

  static const char* value(const hand_comm::hand_SetAngle&) { return value(); } 
};

template<>
struct DataType<hand_comm::hand_SetAngle> {
  static const char* value() 
  {
    return "hand_comm/hand_SetAngle";
  }

  static const char* value(const hand_comm::hand_SetAngle&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<hand_comm::hand_SetAngleRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2af98a0f7367c07e91d2380026087984";
  }

  static const char* value(const hand_comm::hand_SetAngleRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<hand_comm::hand_SetAngleRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hand_comm/hand_SetAngle";
  }

  static const char* value(const hand_comm::hand_SetAngleRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<hand_comm::hand_SetAngleResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2af98a0f7367c07e91d2380026087984";
  }

  static const char* value(const hand_comm::hand_SetAngleResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<hand_comm::hand_SetAngleResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hand_comm/hand_SetAngle";
  }

  static const char* value(const hand_comm::hand_SetAngleResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // HAND_COMM_SERVICE_HAND_SETANGLE_H

