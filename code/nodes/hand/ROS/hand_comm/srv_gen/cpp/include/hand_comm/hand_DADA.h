/* Auto-generated by genmsg_cpp for file /home/mcube/hands_MLab/code/nodes/hand/ROS/hand_comm/srv/hand_DADA.srv */
#ifndef HAND_COMM_SERVICE_HAND_DADA_H
#define HAND_COMM_SERVICE_HAND_DADA_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace hand_comm
{
template <class ContainerAllocator>
struct hand_DADARequest_ {
  typedef hand_DADARequest_<ContainerAllocator> Type;

  hand_DADARequest_()
  : delay1(0.0)
  , angle1(0.0)
  , delay2(0.0)
  , angle2(0.0)
  {
  }

  hand_DADARequest_(const ContainerAllocator& _alloc)
  : delay1(0.0)
  , angle1(0.0)
  , delay2(0.0)
  , angle2(0.0)
  {
  }

  typedef double _delay1_type;
  double delay1;

  typedef double _angle1_type;
  double angle1;

  typedef double _delay2_type;
  double delay2;

  typedef double _angle2_type;
  double angle2;


  typedef boost::shared_ptr< ::hand_comm::hand_DADARequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hand_comm::hand_DADARequest_<ContainerAllocator>  const> ConstPtr;
}; // struct hand_DADARequest
typedef  ::hand_comm::hand_DADARequest_<std::allocator<void> > hand_DADARequest;

typedef boost::shared_ptr< ::hand_comm::hand_DADARequest> hand_DADARequestPtr;
typedef boost::shared_ptr< ::hand_comm::hand_DADARequest const> hand_DADARequestConstPtr;



template <class ContainerAllocator>
struct hand_DADAResponse_ {
  typedef hand_DADAResponse_<ContainerAllocator> Type;

  hand_DADAResponse_()
  : ret(0)
  , msg()
  {
  }

  hand_DADAResponse_(const ContainerAllocator& _alloc)
  : ret(0)
  , msg(_alloc)
  {
  }

  typedef int64_t _ret_type;
  int64_t ret;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _msg_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  msg;


  typedef boost::shared_ptr< ::hand_comm::hand_DADAResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hand_comm::hand_DADAResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct hand_DADAResponse
typedef  ::hand_comm::hand_DADAResponse_<std::allocator<void> > hand_DADAResponse;

typedef boost::shared_ptr< ::hand_comm::hand_DADAResponse> hand_DADAResponsePtr;
typedef boost::shared_ptr< ::hand_comm::hand_DADAResponse const> hand_DADAResponseConstPtr;


struct hand_DADA
{

typedef hand_DADARequest Request;
typedef hand_DADAResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct hand_DADA
} // namespace hand_comm

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::hand_comm::hand_DADARequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::hand_comm::hand_DADARequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::hand_comm::hand_DADARequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "15432e1a7385d0e19fba4fdaed9a1eed";
  }

  static const char* value(const  ::hand_comm::hand_DADARequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x15432e1a7385d0e1ULL;
  static const uint64_t static_value2 = 0x9fba4fdaed9a1eedULL;
};

template<class ContainerAllocator>
struct DataType< ::hand_comm::hand_DADARequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hand_comm/hand_DADARequest";
  }

  static const char* value(const  ::hand_comm::hand_DADARequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::hand_comm::hand_DADARequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
float64 delay1\n\
float64 angle1\n\
float64 delay2\n\
float64 angle2\n\
\n\
";
  }

  static const char* value(const  ::hand_comm::hand_DADARequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::hand_comm::hand_DADARequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::hand_comm::hand_DADAResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::hand_comm::hand_DADAResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::hand_comm::hand_DADAResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1e32786be6359fbbb6259aee4f579d10";
  }

  static const char* value(const  ::hand_comm::hand_DADAResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x1e32786be6359fbbULL;
  static const uint64_t static_value2 = 0xb6259aee4f579d10ULL;
};

template<class ContainerAllocator>
struct DataType< ::hand_comm::hand_DADAResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hand_comm/hand_DADAResponse";
  }

  static const char* value(const  ::hand_comm::hand_DADAResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::hand_comm::hand_DADAResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int64 ret\n\
string msg\n\
\n\
\n\
";
  }

  static const char* value(const  ::hand_comm::hand_DADAResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::hand_comm::hand_DADARequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.delay1);
    stream.next(m.angle1);
    stream.next(m.delay2);
    stream.next(m.angle2);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct hand_DADARequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::hand_comm::hand_DADAResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.ret);
    stream.next(m.msg);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct hand_DADAResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<hand_comm::hand_DADA> {
  static const char* value() 
  {
    return "53a2f6eec8e4839d6b5affbac7fa0866";
  }

  static const char* value(const hand_comm::hand_DADA&) { return value(); } 
};

template<>
struct DataType<hand_comm::hand_DADA> {
  static const char* value() 
  {
    return "hand_comm/hand_DADA";
  }

  static const char* value(const hand_comm::hand_DADA&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<hand_comm::hand_DADARequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "53a2f6eec8e4839d6b5affbac7fa0866";
  }

  static const char* value(const hand_comm::hand_DADARequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<hand_comm::hand_DADARequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hand_comm/hand_DADA";
  }

  static const char* value(const hand_comm::hand_DADARequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<hand_comm::hand_DADAResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "53a2f6eec8e4839d6b5affbac7fa0866";
  }

  static const char* value(const hand_comm::hand_DADAResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<hand_comm::hand_DADAResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hand_comm/hand_DADA";
  }

  static const char* value(const hand_comm::hand_DADAResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // HAND_COMM_SERVICE_HAND_DADA_H

