/* Auto-generated by genmsg_cpp for file /home/mcube/hands_MLab/code/nodes/hand/ROS/hand_comm/srv/hand_SetRest.srv */
#ifndef HAND_COMM_SERVICE_HAND_SETREST_H
#define HAND_COMM_SERVICE_HAND_SETREST_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace hand_comm
{
template <class ContainerAllocator>
struct hand_SetRestRequest_ {
  typedef hand_SetRestRequest_<ContainerAllocator> Type;

  hand_SetRestRequest_()
  {
  }

  hand_SetRestRequest_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::hand_comm::hand_SetRestRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hand_comm::hand_SetRestRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct hand_SetRestRequest
typedef  ::hand_comm::hand_SetRestRequest_<std::allocator<void> > hand_SetRestRequest;

typedef boost::shared_ptr< ::hand_comm::hand_SetRestRequest> hand_SetRestRequestPtr;
typedef boost::shared_ptr< ::hand_comm::hand_SetRestRequest const> hand_SetRestRequestConstPtr;



template <class ContainerAllocator>
struct hand_SetRestResponse_ {
  typedef hand_SetRestResponse_<ContainerAllocator> Type;

  hand_SetRestResponse_()
  : ret(0)
  , msg()
  {
  }

  hand_SetRestResponse_(const ContainerAllocator& _alloc)
  : ret(0)
  , msg(_alloc)
  {
  }

  typedef int64_t _ret_type;
  int64_t ret;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _msg_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  msg;


  typedef boost::shared_ptr< ::hand_comm::hand_SetRestResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hand_comm::hand_SetRestResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct hand_SetRestResponse
typedef  ::hand_comm::hand_SetRestResponse_<std::allocator<void> > hand_SetRestResponse;

typedef boost::shared_ptr< ::hand_comm::hand_SetRestResponse> hand_SetRestResponsePtr;
typedef boost::shared_ptr< ::hand_comm::hand_SetRestResponse const> hand_SetRestResponseConstPtr;


struct hand_SetRest
{

typedef hand_SetRestRequest Request;
typedef hand_SetRestResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct hand_SetRest
} // namespace hand_comm

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::hand_comm::hand_SetRestRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::hand_comm::hand_SetRestRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::hand_comm::hand_SetRestRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::hand_comm::hand_SetRestRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::hand_comm::hand_SetRestRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hand_comm/hand_SetRestRequest";
  }

  static const char* value(const  ::hand_comm::hand_SetRestRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::hand_comm::hand_SetRestRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
";
  }

  static const char* value(const  ::hand_comm::hand_SetRestRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::hand_comm::hand_SetRestRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::hand_comm::hand_SetRestResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::hand_comm::hand_SetRestResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::hand_comm::hand_SetRestResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1e32786be6359fbbb6259aee4f579d10";
  }

  static const char* value(const  ::hand_comm::hand_SetRestResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x1e32786be6359fbbULL;
  static const uint64_t static_value2 = 0xb6259aee4f579d10ULL;
};

template<class ContainerAllocator>
struct DataType< ::hand_comm::hand_SetRestResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hand_comm/hand_SetRestResponse";
  }

  static const char* value(const  ::hand_comm::hand_SetRestResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::hand_comm::hand_SetRestResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int64 ret\n\
string msg\n\
\n\
\n\
";
  }

  static const char* value(const  ::hand_comm::hand_SetRestResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::hand_comm::hand_SetRestRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct hand_SetRestRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::hand_comm::hand_SetRestResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.ret);
    stream.next(m.msg);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct hand_SetRestResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<hand_comm::hand_SetRest> {
  static const char* value() 
  {
    return "1e32786be6359fbbb6259aee4f579d10";
  }

  static const char* value(const hand_comm::hand_SetRest&) { return value(); } 
};

template<>
struct DataType<hand_comm::hand_SetRest> {
  static const char* value() 
  {
    return "hand_comm/hand_SetRest";
  }

  static const char* value(const hand_comm::hand_SetRest&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<hand_comm::hand_SetRestRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1e32786be6359fbbb6259aee4f579d10";
  }

  static const char* value(const hand_comm::hand_SetRestRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<hand_comm::hand_SetRestRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hand_comm/hand_SetRest";
  }

  static const char* value(const hand_comm::hand_SetRestRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<hand_comm::hand_SetRestResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1e32786be6359fbbb6259aee4f579d10";
  }

  static const char* value(const hand_comm::hand_SetRestResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<hand_comm::hand_SetRestResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hand_comm/hand_SetRest";
  }

  static const char* value(const hand_comm::hand_SetRestResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // HAND_COMM_SERVICE_HAND_SETREST_H

