/* Auto-generated by genmsg_cpp for file /home/mcube/hands_MLab/code/nodes/logger/ROS/logger_comm/srv/logger_Create.srv */
#ifndef LOGGER_COMM_SERVICE_LOGGER_CREATE_H
#define LOGGER_COMM_SERVICE_LOGGER_CREATE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace logger_comm
{
template <class ContainerAllocator>
struct logger_CreateRequest_ {
  typedef logger_CreateRequest_<ContainerAllocator> Type;

  logger_CreateRequest_()
  {
  }

  logger_CreateRequest_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::logger_comm::logger_CreateRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::logger_comm::logger_CreateRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct logger_CreateRequest
typedef  ::logger_comm::logger_CreateRequest_<std::allocator<void> > logger_CreateRequest;

typedef boost::shared_ptr< ::logger_comm::logger_CreateRequest> logger_CreateRequestPtr;
typedef boost::shared_ptr< ::logger_comm::logger_CreateRequest const> logger_CreateRequestConstPtr;



template <class ContainerAllocator>
struct logger_CreateResponse_ {
  typedef logger_CreateResponse_<ContainerAllocator> Type;

  logger_CreateResponse_()
  : filename()
  , ret(0)
  , msg()
  {
  }

  logger_CreateResponse_(const ContainerAllocator& _alloc)
  : filename(_alloc)
  , ret(0)
  , msg(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _filename_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  filename;

  typedef int64_t _ret_type;
  int64_t ret;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _msg_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  msg;


  typedef boost::shared_ptr< ::logger_comm::logger_CreateResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::logger_comm::logger_CreateResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct logger_CreateResponse
typedef  ::logger_comm::logger_CreateResponse_<std::allocator<void> > logger_CreateResponse;

typedef boost::shared_ptr< ::logger_comm::logger_CreateResponse> logger_CreateResponsePtr;
typedef boost::shared_ptr< ::logger_comm::logger_CreateResponse const> logger_CreateResponseConstPtr;


struct logger_Create
{

typedef logger_CreateRequest Request;
typedef logger_CreateResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct logger_Create
} // namespace logger_comm

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::logger_comm::logger_CreateRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::logger_comm::logger_CreateRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::logger_comm::logger_CreateRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::logger_comm::logger_CreateRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::logger_comm::logger_CreateRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "logger_comm/logger_CreateRequest";
  }

  static const char* value(const  ::logger_comm::logger_CreateRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::logger_comm::logger_CreateRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
";
  }

  static const char* value(const  ::logger_comm::logger_CreateRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::logger_comm::logger_CreateRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::logger_comm::logger_CreateResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::logger_comm::logger_CreateResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::logger_comm::logger_CreateResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c38c43175a19a935e6ed91a689ba16f4";
  }

  static const char* value(const  ::logger_comm::logger_CreateResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xc38c43175a19a935ULL;
  static const uint64_t static_value2 = 0xe6ed91a689ba16f4ULL;
};

template<class ContainerAllocator>
struct DataType< ::logger_comm::logger_CreateResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "logger_comm/logger_CreateResponse";
  }

  static const char* value(const  ::logger_comm::logger_CreateResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::logger_comm::logger_CreateResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string filename\n\
int64 ret\n\
string msg\n\
\n\
\n\
";
  }

  static const char* value(const  ::logger_comm::logger_CreateResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::logger_comm::logger_CreateRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct logger_CreateRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::logger_comm::logger_CreateResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.filename);
    stream.next(m.ret);
    stream.next(m.msg);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct logger_CreateResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<logger_comm::logger_Create> {
  static const char* value() 
  {
    return "c38c43175a19a935e6ed91a689ba16f4";
  }

  static const char* value(const logger_comm::logger_Create&) { return value(); } 
};

template<>
struct DataType<logger_comm::logger_Create> {
  static const char* value() 
  {
    return "logger_comm/logger_Create";
  }

  static const char* value(const logger_comm::logger_Create&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<logger_comm::logger_CreateRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c38c43175a19a935e6ed91a689ba16f4";
  }

  static const char* value(const logger_comm::logger_CreateRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<logger_comm::logger_CreateRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "logger_comm/logger_Create";
  }

  static const char* value(const logger_comm::logger_CreateRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<logger_comm::logger_CreateResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c38c43175a19a935e6ed91a689ba16f4";
  }

  static const char* value(const logger_comm::logger_CreateResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<logger_comm::logger_CreateResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "logger_comm/logger_Create";
  }

  static const char* value(const logger_comm::logger_CreateResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // LOGGER_COMM_SERVICE_LOGGER_CREATE_H

