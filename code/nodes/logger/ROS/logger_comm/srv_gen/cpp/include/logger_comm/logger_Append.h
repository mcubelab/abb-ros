/* Auto-generated by genmsg_cpp for file /home/mcube/hands_MLab/code/nodes/logger/ROS/logger_comm/srv/logger_Append.srv */
#ifndef LOGGER_COMM_SERVICE_LOGGER_APPEND_H
#define LOGGER_COMM_SERVICE_LOGGER_APPEND_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace logger_comm
{
template <class ContainerAllocator>
struct logger_AppendRequest_ {
  typedef logger_AppendRequest_<ContainerAllocator> Type;

  logger_AppendRequest_()
  : filename()
  , info()
  {
  }

  logger_AppendRequest_(const ContainerAllocator& _alloc)
  : filename(_alloc)
  , info(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _filename_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  filename;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _info_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  info;


  typedef boost::shared_ptr< ::logger_comm::logger_AppendRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::logger_comm::logger_AppendRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct logger_AppendRequest
typedef  ::logger_comm::logger_AppendRequest_<std::allocator<void> > logger_AppendRequest;

typedef boost::shared_ptr< ::logger_comm::logger_AppendRequest> logger_AppendRequestPtr;
typedef boost::shared_ptr< ::logger_comm::logger_AppendRequest const> logger_AppendRequestConstPtr;



template <class ContainerAllocator>
struct logger_AppendResponse_ {
  typedef logger_AppendResponse_<ContainerAllocator> Type;

  logger_AppendResponse_()
  : ret(0)
  , msg()
  {
  }

  logger_AppendResponse_(const ContainerAllocator& _alloc)
  : ret(0)
  , msg(_alloc)
  {
  }

  typedef int64_t _ret_type;
  int64_t ret;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _msg_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  msg;


  typedef boost::shared_ptr< ::logger_comm::logger_AppendResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::logger_comm::logger_AppendResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct logger_AppendResponse
typedef  ::logger_comm::logger_AppendResponse_<std::allocator<void> > logger_AppendResponse;

typedef boost::shared_ptr< ::logger_comm::logger_AppendResponse> logger_AppendResponsePtr;
typedef boost::shared_ptr< ::logger_comm::logger_AppendResponse const> logger_AppendResponseConstPtr;


struct logger_Append
{

typedef logger_AppendRequest Request;
typedef logger_AppendResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct logger_Append
} // namespace logger_comm

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::logger_comm::logger_AppendRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::logger_comm::logger_AppendRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::logger_comm::logger_AppendRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "7b7a00971fcb463a8570a50ea7804a44";
  }

  static const char* value(const  ::logger_comm::logger_AppendRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x7b7a00971fcb463aULL;
  static const uint64_t static_value2 = 0x8570a50ea7804a44ULL;
};

template<class ContainerAllocator>
struct DataType< ::logger_comm::logger_AppendRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "logger_comm/logger_AppendRequest";
  }

  static const char* value(const  ::logger_comm::logger_AppendRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::logger_comm::logger_AppendRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
string filename\n\
string info\n\
\n\
";
  }

  static const char* value(const  ::logger_comm::logger_AppendRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::logger_comm::logger_AppendResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::logger_comm::logger_AppendResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::logger_comm::logger_AppendResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1e32786be6359fbbb6259aee4f579d10";
  }

  static const char* value(const  ::logger_comm::logger_AppendResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x1e32786be6359fbbULL;
  static const uint64_t static_value2 = 0xb6259aee4f579d10ULL;
};

template<class ContainerAllocator>
struct DataType< ::logger_comm::logger_AppendResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "logger_comm/logger_AppendResponse";
  }

  static const char* value(const  ::logger_comm::logger_AppendResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::logger_comm::logger_AppendResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int64 ret\n\
string msg\n\
\n\
\n\
";
  }

  static const char* value(const  ::logger_comm::logger_AppendResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::logger_comm::logger_AppendRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.filename);
    stream.next(m.info);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct logger_AppendRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::logger_comm::logger_AppendResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.ret);
    stream.next(m.msg);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct logger_AppendResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<logger_comm::logger_Append> {
  static const char* value() 
  {
    return "da667c4f325449d645f216c4f1f1f17e";
  }

  static const char* value(const logger_comm::logger_Append&) { return value(); } 
};

template<>
struct DataType<logger_comm::logger_Append> {
  static const char* value() 
  {
    return "logger_comm/logger_Append";
  }

  static const char* value(const logger_comm::logger_Append&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<logger_comm::logger_AppendRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "da667c4f325449d645f216c4f1f1f17e";
  }

  static const char* value(const logger_comm::logger_AppendRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<logger_comm::logger_AppendRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "logger_comm/logger_Append";
  }

  static const char* value(const logger_comm::logger_AppendRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<logger_comm::logger_AppendResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "da667c4f325449d645f216c4f1f1f17e";
  }

  static const char* value(const logger_comm::logger_AppendResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<logger_comm::logger_AppendResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "logger_comm/logger_Append";
  }

  static const char* value(const logger_comm::logger_AppendResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // LOGGER_COMM_SERVICE_LOGGER_APPEND_H

