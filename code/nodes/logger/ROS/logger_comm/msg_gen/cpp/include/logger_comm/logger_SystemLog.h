/* Auto-generated by genmsg_cpp for file /home/mcube/hands_MLab/code/nodes/logger/ROS/logger_comm/msg/logger_SystemLog.msg */
#ifndef LOGGER_COMM_MESSAGE_LOGGER_SYSTEMLOG_H
#define LOGGER_COMM_MESSAGE_LOGGER_SYSTEMLOG_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace logger_comm
{
template <class ContainerAllocator>
struct logger_SystemLog_ {
  typedef logger_SystemLog_<ContainerAllocator> Type;

  logger_SystemLog_()
  : timeStamp(0.0)
  , logtimeStamp(0.0)
  , id(0)
  , x(0.0)
  , y(0.0)
  , z(0.0)
  , q0(0.0)
  , qx(0.0)
  , qy(0.0)
  , qz(0.0)
  , j1(0.0)
  , j2(0.0)
  , j3(0.0)
  , j4(0.0)
  , j5(0.0)
  , j6(0.0)
  , fx(0.0)
  , fy(0.0)
  , fz(0.0)
  , tx(0.0)
  , ty(0.0)
  , tz(0.0)
  , encMotor(0)
  , encFinger()
  , angleMotor(0.0)
  , angle()
  , rawForces()
  , forces()
  {
  }

  logger_SystemLog_(const ContainerAllocator& _alloc)
  : timeStamp(0.0)
  , logtimeStamp(0.0)
  , id(0)
  , x(0.0)
  , y(0.0)
  , z(0.0)
  , q0(0.0)
  , qx(0.0)
  , qy(0.0)
  , qz(0.0)
  , j1(0.0)
  , j2(0.0)
  , j3(0.0)
  , j4(0.0)
  , j5(0.0)
  , j6(0.0)
  , fx(0.0)
  , fy(0.0)
  , fz(0.0)
  , tx(0.0)
  , ty(0.0)
  , tz(0.0)
  , encMotor(0)
  , encFinger(_alloc)
  , angleMotor(0.0)
  , angle(_alloc)
  , rawForces(_alloc)
  , forces(_alloc)
  {
  }

  typedef double _timeStamp_type;
  double timeStamp;

  typedef double _logtimeStamp_type;
  double logtimeStamp;

  typedef int64_t _id_type;
  int64_t id;

  typedef double _x_type;
  double x;

  typedef double _y_type;
  double y;

  typedef double _z_type;
  double z;

  typedef double _q0_type;
  double q0;

  typedef double _qx_type;
  double qx;

  typedef double _qy_type;
  double qy;

  typedef double _qz_type;
  double qz;

  typedef double _j1_type;
  double j1;

  typedef double _j2_type;
  double j2;

  typedef double _j3_type;
  double j3;

  typedef double _j4_type;
  double j4;

  typedef double _j5_type;
  double j5;

  typedef double _j6_type;
  double j6;

  typedef double _fx_type;
  double fx;

  typedef double _fy_type;
  double fy;

  typedef double _fz_type;
  double fz;

  typedef double _tx_type;
  double tx;

  typedef double _ty_type;
  double ty;

  typedef double _tz_type;
  double tz;

  typedef int64_t _encMotor_type;
  int64_t encMotor;

  typedef std::vector<int64_t, typename ContainerAllocator::template rebind<int64_t>::other >  _encFinger_type;
  std::vector<int64_t, typename ContainerAllocator::template rebind<int64_t>::other >  encFinger;

  typedef double _angleMotor_type;
  double angleMotor;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _angle_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  angle;

  typedef std::vector<int64_t, typename ContainerAllocator::template rebind<int64_t>::other >  _rawForces_type;
  std::vector<int64_t, typename ContainerAllocator::template rebind<int64_t>::other >  rawForces;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _forces_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  forces;


  typedef boost::shared_ptr< ::logger_comm::logger_SystemLog_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::logger_comm::logger_SystemLog_<ContainerAllocator>  const> ConstPtr;
}; // struct logger_SystemLog
typedef  ::logger_comm::logger_SystemLog_<std::allocator<void> > logger_SystemLog;

typedef boost::shared_ptr< ::logger_comm::logger_SystemLog> logger_SystemLogPtr;
typedef boost::shared_ptr< ::logger_comm::logger_SystemLog const> logger_SystemLogConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::logger_comm::logger_SystemLog_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::logger_comm::logger_SystemLog_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace logger_comm

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::logger_comm::logger_SystemLog_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::logger_comm::logger_SystemLog_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::logger_comm::logger_SystemLog_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2a93d37f3d5e6cc2a80cf3c1772b2f9e";
  }

  static const char* value(const  ::logger_comm::logger_SystemLog_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x2a93d37f3d5e6cc2ULL;
  static const uint64_t static_value2 = 0xa80cf3c1772b2f9eULL;
};

template<class ContainerAllocator>
struct DataType< ::logger_comm::logger_SystemLog_<ContainerAllocator> > {
  static const char* value() 
  {
    return "logger_comm/logger_SystemLog";
  }

  static const char* value(const  ::logger_comm::logger_SystemLog_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::logger_comm::logger_SystemLog_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64 timeStamp    # ROS time-stamp\n\
float64 logtimeStamp # Time since the beginning of last logStart.\n\
int64 id             # Id of file begin logged.\n\
float64 x            # x-coordinate of the robot.\n\
float64 y            # y-coordinate of the robot.\n\
float64 z            # z-coordinate of the robot.\n\
float64 q0 	     # q0-coordinate of the robot.\n\
float64 qx           # qx-coordinate of the robot.\n\
float64 qy	     # qy-coordinate of the robot.\n\
float64 qz	     # qz-coordinate of the robot.\n\
float64 j1	     # joint 1 of the robot.\n\
float64 j2	     # joint 2 of the robot.\n\
float64 j3	     # joint 3 of the robot.\n\
float64 j4	     # joint 4 of the robot.\n\
float64 j5	     # joint 5 of the robot.\n\
float64 j6	     # joint 6 of the robot.\n\
float64 fx	     # force in the x direction.\n\
float64 fy	     # force in the y direction.\n\
float64 fz	     # force in the z direction.\n\
float64 tx	     # torque in the x direction.\n\
float64 ty	     # torque in the y direction.\n\
float64 tz	     # torque in the z direction.\n\
int64 encMotor	     # motor encoder.\n\
int64[] encFinger    # array of finger encoders.\n\
float64 angleMotor   # motor angle.\n\
float64[] angle	     # array of finger angles.\n\
int64[] rawForces	   # hand palm raw forces.\n\
float64[] forces	   # hand palm calibrated forces.\n\
\n\
";
  }

  static const char* value(const  ::logger_comm::logger_SystemLog_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::logger_comm::logger_SystemLog_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.timeStamp);
    stream.next(m.logtimeStamp);
    stream.next(m.id);
    stream.next(m.x);
    stream.next(m.y);
    stream.next(m.z);
    stream.next(m.q0);
    stream.next(m.qx);
    stream.next(m.qy);
    stream.next(m.qz);
    stream.next(m.j1);
    stream.next(m.j2);
    stream.next(m.j3);
    stream.next(m.j4);
    stream.next(m.j5);
    stream.next(m.j6);
    stream.next(m.fx);
    stream.next(m.fy);
    stream.next(m.fz);
    stream.next(m.tx);
    stream.next(m.ty);
    stream.next(m.tz);
    stream.next(m.encMotor);
    stream.next(m.encFinger);
    stream.next(m.angleMotor);
    stream.next(m.angle);
    stream.next(m.rawForces);
    stream.next(m.forces);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct logger_SystemLog_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::logger_comm::logger_SystemLog_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::logger_comm::logger_SystemLog_<ContainerAllocator> & v) 
  {
    s << indent << "timeStamp: ";
    Printer<double>::stream(s, indent + "  ", v.timeStamp);
    s << indent << "logtimeStamp: ";
    Printer<double>::stream(s, indent + "  ", v.logtimeStamp);
    s << indent << "id: ";
    Printer<int64_t>::stream(s, indent + "  ", v.id);
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<double>::stream(s, indent + "  ", v.z);
    s << indent << "q0: ";
    Printer<double>::stream(s, indent + "  ", v.q0);
    s << indent << "qx: ";
    Printer<double>::stream(s, indent + "  ", v.qx);
    s << indent << "qy: ";
    Printer<double>::stream(s, indent + "  ", v.qy);
    s << indent << "qz: ";
    Printer<double>::stream(s, indent + "  ", v.qz);
    s << indent << "j1: ";
    Printer<double>::stream(s, indent + "  ", v.j1);
    s << indent << "j2: ";
    Printer<double>::stream(s, indent + "  ", v.j2);
    s << indent << "j3: ";
    Printer<double>::stream(s, indent + "  ", v.j3);
    s << indent << "j4: ";
    Printer<double>::stream(s, indent + "  ", v.j4);
    s << indent << "j5: ";
    Printer<double>::stream(s, indent + "  ", v.j5);
    s << indent << "j6: ";
    Printer<double>::stream(s, indent + "  ", v.j6);
    s << indent << "fx: ";
    Printer<double>::stream(s, indent + "  ", v.fx);
    s << indent << "fy: ";
    Printer<double>::stream(s, indent + "  ", v.fy);
    s << indent << "fz: ";
    Printer<double>::stream(s, indent + "  ", v.fz);
    s << indent << "tx: ";
    Printer<double>::stream(s, indent + "  ", v.tx);
    s << indent << "ty: ";
    Printer<double>::stream(s, indent + "  ", v.ty);
    s << indent << "tz: ";
    Printer<double>::stream(s, indent + "  ", v.tz);
    s << indent << "encMotor: ";
    Printer<int64_t>::stream(s, indent + "  ", v.encMotor);
    s << indent << "encFinger[]" << std::endl;
    for (size_t i = 0; i < v.encFinger.size(); ++i)
    {
      s << indent << "  encFinger[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.encFinger[i]);
    }
    s << indent << "angleMotor: ";
    Printer<double>::stream(s, indent + "  ", v.angleMotor);
    s << indent << "angle[]" << std::endl;
    for (size_t i = 0; i < v.angle.size(); ++i)
    {
      s << indent << "  angle[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.angle[i]);
    }
    s << indent << "rawForces[]" << std::endl;
    for (size_t i = 0; i < v.rawForces.size(); ++i)
    {
      s << indent << "  rawForces[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.rawForces[i]);
    }
    s << indent << "forces[]" << std::endl;
    for (size_t i = 0; i < v.forces.size(); ++i)
    {
      s << indent << "  forces[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.forces[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // LOGGER_COMM_MESSAGE_LOGGER_SYSTEMLOG_H

