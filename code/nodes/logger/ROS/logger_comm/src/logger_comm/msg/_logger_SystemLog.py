"""autogenerated by genpy from logger_comm/logger_SystemLog.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class logger_SystemLog(genpy.Message):
  _md5sum = "2a93d37f3d5e6cc2a80cf3c1772b2f9e"
  _type = "logger_comm/logger_SystemLog"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 timeStamp    # ROS time-stamp
float64 logtimeStamp # Time since the beginning of last logStart.
int64 id             # Id of file begin logged.
float64 x            # x-coordinate of the robot.
float64 y            # y-coordinate of the robot.
float64 z            # z-coordinate of the robot.
float64 q0 	     # q0-coordinate of the robot.
float64 qx           # qx-coordinate of the robot.
float64 qy	     # qy-coordinate of the robot.
float64 qz	     # qz-coordinate of the robot.
float64 j1	     # joint 1 of the robot.
float64 j2	     # joint 2 of the robot.
float64 j3	     # joint 3 of the robot.
float64 j4	     # joint 4 of the robot.
float64 j5	     # joint 5 of the robot.
float64 j6	     # joint 6 of the robot.
float64 fx	     # force in the x direction.
float64 fy	     # force in the y direction.
float64 fz	     # force in the z direction.
float64 tx	     # torque in the x direction.
float64 ty	     # torque in the y direction.
float64 tz	     # torque in the z direction.
int64 encMotor	     # motor encoder.
int64[] encFinger    # array of finger encoders.
float64 angleMotor   # motor angle.
float64[] angle	     # array of finger angles.
int64[] rawForces	   # hand palm raw forces.
float64[] forces	   # hand palm calibrated forces.

"""
  __slots__ = ['timeStamp','logtimeStamp','id','x','y','z','q0','qx','qy','qz','j1','j2','j3','j4','j5','j6','fx','fy','fz','tx','ty','tz','encMotor','encFinger','angleMotor','angle','rawForces','forces']
  _slot_types = ['float64','float64','int64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','int64','int64[]','float64','float64[]','int64[]','float64[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       timeStamp,logtimeStamp,id,x,y,z,q0,qx,qy,qz,j1,j2,j3,j4,j5,j6,fx,fy,fz,tx,ty,tz,encMotor,encFinger,angleMotor,angle,rawForces,forces

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(logger_SystemLog, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.timeStamp is None:
        self.timeStamp = 0.
      if self.logtimeStamp is None:
        self.logtimeStamp = 0.
      if self.id is None:
        self.id = 0
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
      if self.z is None:
        self.z = 0.
      if self.q0 is None:
        self.q0 = 0.
      if self.qx is None:
        self.qx = 0.
      if self.qy is None:
        self.qy = 0.
      if self.qz is None:
        self.qz = 0.
      if self.j1 is None:
        self.j1 = 0.
      if self.j2 is None:
        self.j2 = 0.
      if self.j3 is None:
        self.j3 = 0.
      if self.j4 is None:
        self.j4 = 0.
      if self.j5 is None:
        self.j5 = 0.
      if self.j6 is None:
        self.j6 = 0.
      if self.fx is None:
        self.fx = 0.
      if self.fy is None:
        self.fy = 0.
      if self.fz is None:
        self.fz = 0.
      if self.tx is None:
        self.tx = 0.
      if self.ty is None:
        self.ty = 0.
      if self.tz is None:
        self.tz = 0.
      if self.encMotor is None:
        self.encMotor = 0
      if self.encFinger is None:
        self.encFinger = []
      if self.angleMotor is None:
        self.angleMotor = 0.
      if self.angle is None:
        self.angle = []
      if self.rawForces is None:
        self.rawForces = []
      if self.forces is None:
        self.forces = []
    else:
      self.timeStamp = 0.
      self.logtimeStamp = 0.
      self.id = 0
      self.x = 0.
      self.y = 0.
      self.z = 0.
      self.q0 = 0.
      self.qx = 0.
      self.qy = 0.
      self.qz = 0.
      self.j1 = 0.
      self.j2 = 0.
      self.j3 = 0.
      self.j4 = 0.
      self.j5 = 0.
      self.j6 = 0.
      self.fx = 0.
      self.fy = 0.
      self.fz = 0.
      self.tx = 0.
      self.ty = 0.
      self.tz = 0.
      self.encMotor = 0
      self.encFinger = []
      self.angleMotor = 0.
      self.angle = []
      self.rawForces = []
      self.forces = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2dq19dq.pack(_x.timeStamp, _x.logtimeStamp, _x.id, _x.x, _x.y, _x.z, _x.q0, _x.qx, _x.qy, _x.qz, _x.j1, _x.j2, _x.j3, _x.j4, _x.j5, _x.j6, _x.fx, _x.fy, _x.fz, _x.tx, _x.ty, _x.tz, _x.encMotor))
      length = len(self.encFinger)
      buff.write(_struct_I.pack(length))
      pattern = '<%sq'%length
      buff.write(struct.pack(pattern, *self.encFinger))
      buff.write(_struct_d.pack(self.angleMotor))
      length = len(self.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.angle))
      length = len(self.rawForces)
      buff.write(_struct_I.pack(length))
      pattern = '<%sq'%length
      buff.write(struct.pack(pattern, *self.rawForces))
      length = len(self.forces)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.forces))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 184
      (_x.timeStamp, _x.logtimeStamp, _x.id, _x.x, _x.y, _x.z, _x.q0, _x.qx, _x.qy, _x.qz, _x.j1, _x.j2, _x.j3, _x.j4, _x.j5, _x.j6, _x.fx, _x.fy, _x.fz, _x.tx, _x.ty, _x.tz, _x.encMotor,) = _struct_2dq19dq.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sq'%length
      start = end
      end += struct.calcsize(pattern)
      self.encFinger = struct.unpack(pattern, str[start:end])
      start = end
      end += 8
      (self.angleMotor,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.angle = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sq'%length
      start = end
      end += struct.calcsize(pattern)
      self.rawForces = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.forces = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2dq19dq.pack(_x.timeStamp, _x.logtimeStamp, _x.id, _x.x, _x.y, _x.z, _x.q0, _x.qx, _x.qy, _x.qz, _x.j1, _x.j2, _x.j3, _x.j4, _x.j5, _x.j6, _x.fx, _x.fy, _x.fz, _x.tx, _x.ty, _x.tz, _x.encMotor))
      length = len(self.encFinger)
      buff.write(_struct_I.pack(length))
      pattern = '<%sq'%length
      buff.write(self.encFinger.tostring())
      buff.write(_struct_d.pack(self.angleMotor))
      length = len(self.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.angle.tostring())
      length = len(self.rawForces)
      buff.write(_struct_I.pack(length))
      pattern = '<%sq'%length
      buff.write(self.rawForces.tostring())
      length = len(self.forces)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.forces.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 184
      (_x.timeStamp, _x.logtimeStamp, _x.id, _x.x, _x.y, _x.z, _x.q0, _x.qx, _x.qy, _x.qz, _x.j1, _x.j2, _x.j3, _x.j4, _x.j5, _x.j6, _x.fx, _x.fy, _x.fz, _x.tx, _x.ty, _x.tz, _x.encMotor,) = _struct_2dq19dq.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sq'%length
      start = end
      end += struct.calcsize(pattern)
      self.encFinger = numpy.frombuffer(str[start:end], dtype=numpy.int64, count=length)
      start = end
      end += 8
      (self.angleMotor,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.angle = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sq'%length
      start = end
      end += struct.calcsize(pattern)
      self.rawForces = numpy.frombuffer(str[start:end], dtype=numpy.int64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.forces = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_d = struct.Struct("<d")
_struct_2dq19dq = struct.Struct("<2dq19dq")
