/* Auto-generated by genmsg_cpp for file /home/mcube/hands_MLab/code/nodes/robot/ROS/robot_comm/srv/robot_Approach.srv */
#ifndef ROBOT_COMM_SERVICE_ROBOT_APPROACH_H
#define ROBOT_COMM_SERVICE_ROBOT_APPROACH_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "geometry_msgs/Pose.h"



namespace robot_comm
{
template <class ContainerAllocator>
struct robot_ApproachRequest_ {
  typedef robot_ApproachRequest_<ContainerAllocator> Type;

  robot_ApproachRequest_()
  : pose()
  {
  }

  robot_ApproachRequest_(const ContainerAllocator& _alloc)
  : pose(_alloc)
  {
  }

  typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
   ::geometry_msgs::Pose_<ContainerAllocator>  pose;


  typedef boost::shared_ptr< ::robot_comm::robot_ApproachRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_comm::robot_ApproachRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct robot_ApproachRequest
typedef  ::robot_comm::robot_ApproachRequest_<std::allocator<void> > robot_ApproachRequest;

typedef boost::shared_ptr< ::robot_comm::robot_ApproachRequest> robot_ApproachRequestPtr;
typedef boost::shared_ptr< ::robot_comm::robot_ApproachRequest const> robot_ApproachRequestConstPtr;



template <class ContainerAllocator>
struct robot_ApproachResponse_ {
  typedef robot_ApproachResponse_<ContainerAllocator> Type;

  robot_ApproachResponse_()
  : ret(0)
  , msg()
  {
  }

  robot_ApproachResponse_(const ContainerAllocator& _alloc)
  : ret(0)
  , msg(_alloc)
  {
  }

  typedef int64_t _ret_type;
  int64_t ret;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _msg_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  msg;


  typedef boost::shared_ptr< ::robot_comm::robot_ApproachResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_comm::robot_ApproachResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct robot_ApproachResponse
typedef  ::robot_comm::robot_ApproachResponse_<std::allocator<void> > robot_ApproachResponse;

typedef boost::shared_ptr< ::robot_comm::robot_ApproachResponse> robot_ApproachResponsePtr;
typedef boost::shared_ptr< ::robot_comm::robot_ApproachResponse const> robot_ApproachResponseConstPtr;


struct robot_Approach
{

typedef robot_ApproachRequest Request;
typedef robot_ApproachResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct robot_Approach
} // namespace robot_comm

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::robot_comm::robot_ApproachRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::robot_comm::robot_ApproachRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::robot_comm::robot_ApproachRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f192399f711a48924df9a394d37edd67";
  }

  static const char* value(const  ::robot_comm::robot_ApproachRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xf192399f711a4892ULL;
  static const uint64_t static_value2 = 0x4df9a394d37edd67ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_comm::robot_ApproachRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robot_comm/robot_ApproachRequest";
  }

  static const char* value(const  ::robot_comm::robot_ApproachRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::robot_comm::robot_ApproachRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "geometry_msgs/Pose pose\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::robot_comm::robot_ApproachRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::robot_comm::robot_ApproachRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::robot_comm::robot_ApproachResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::robot_comm::robot_ApproachResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::robot_comm::robot_ApproachResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1e32786be6359fbbb6259aee4f579d10";
  }

  static const char* value(const  ::robot_comm::robot_ApproachResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x1e32786be6359fbbULL;
  static const uint64_t static_value2 = 0xb6259aee4f579d10ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_comm::robot_ApproachResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robot_comm/robot_ApproachResponse";
  }

  static const char* value(const  ::robot_comm::robot_ApproachResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::robot_comm::robot_ApproachResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int64 ret\n\
string msg\n\
\n\
";
  }

  static const char* value(const  ::robot_comm::robot_ApproachResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::robot_comm::robot_ApproachRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.pose);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct robot_ApproachRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::robot_comm::robot_ApproachResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.ret);
    stream.next(m.msg);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct robot_ApproachResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<robot_comm::robot_Approach> {
  static const char* value() 
  {
    return "c21b598a085cb24dc307ad4a1ce16304";
  }

  static const char* value(const robot_comm::robot_Approach&) { return value(); } 
};

template<>
struct DataType<robot_comm::robot_Approach> {
  static const char* value() 
  {
    return "robot_comm/robot_Approach";
  }

  static const char* value(const robot_comm::robot_Approach&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<robot_comm::robot_ApproachRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c21b598a085cb24dc307ad4a1ce16304";
  }

  static const char* value(const robot_comm::robot_ApproachRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<robot_comm::robot_ApproachRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robot_comm/robot_Approach";
  }

  static const char* value(const robot_comm::robot_ApproachRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<robot_comm::robot_ApproachResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c21b598a085cb24dc307ad4a1ce16304";
  }

  static const char* value(const robot_comm::robot_ApproachResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<robot_comm::robot_ApproachResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robot_comm/robot_Approach";
  }

  static const char* value(const robot_comm::robot_ApproachResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // ROBOT_COMM_SERVICE_ROBOT_APPROACH_H

