/* Auto-generated by genmsg_cpp for file /home/mcube/hands_MLab/code/nodes/robot/ROS/robot_comm/srv/robot_SpecialCommand.srv */
#ifndef ROBOT_COMM_SERVICE_ROBOT_SPECIALCOMMAND_H
#define ROBOT_COMM_SERVICE_ROBOT_SPECIALCOMMAND_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace robot_comm
{
template <class ContainerAllocator>
struct robot_SpecialCommandRequest_ {
  typedef robot_SpecialCommandRequest_<ContainerAllocator> Type;

  robot_SpecialCommandRequest_()
  : command(0)
  , param1(0.0)
  , param2(0.0)
  , param3(0.0)
  , param4(0.0)
  , param5(0.0)
  {
  }

  robot_SpecialCommandRequest_(const ContainerAllocator& _alloc)
  : command(0)
  , param1(0.0)
  , param2(0.0)
  , param3(0.0)
  , param4(0.0)
  , param5(0.0)
  {
  }

  typedef int64_t _command_type;
  int64_t command;

  typedef double _param1_type;
  double param1;

  typedef double _param2_type;
  double param2;

  typedef double _param3_type;
  double param3;

  typedef double _param4_type;
  double param4;

  typedef double _param5_type;
  double param5;


  typedef boost::shared_ptr< ::robot_comm::robot_SpecialCommandRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_comm::robot_SpecialCommandRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct robot_SpecialCommandRequest
typedef  ::robot_comm::robot_SpecialCommandRequest_<std::allocator<void> > robot_SpecialCommandRequest;

typedef boost::shared_ptr< ::robot_comm::robot_SpecialCommandRequest> robot_SpecialCommandRequestPtr;
typedef boost::shared_ptr< ::robot_comm::robot_SpecialCommandRequest const> robot_SpecialCommandRequestConstPtr;



template <class ContainerAllocator>
struct robot_SpecialCommandResponse_ {
  typedef robot_SpecialCommandResponse_<ContainerAllocator> Type;

  robot_SpecialCommandResponse_()
  : ret(0)
  , msg()
  {
  }

  robot_SpecialCommandResponse_(const ContainerAllocator& _alloc)
  : ret(0)
  , msg(_alloc)
  {
  }

  typedef int64_t _ret_type;
  int64_t ret;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _msg_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  msg;


  typedef boost::shared_ptr< ::robot_comm::robot_SpecialCommandResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_comm::robot_SpecialCommandResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct robot_SpecialCommandResponse
typedef  ::robot_comm::robot_SpecialCommandResponse_<std::allocator<void> > robot_SpecialCommandResponse;

typedef boost::shared_ptr< ::robot_comm::robot_SpecialCommandResponse> robot_SpecialCommandResponsePtr;
typedef boost::shared_ptr< ::robot_comm::robot_SpecialCommandResponse const> robot_SpecialCommandResponseConstPtr;


struct robot_SpecialCommand
{

typedef robot_SpecialCommandRequest Request;
typedef robot_SpecialCommandResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct robot_SpecialCommand
} // namespace robot_comm

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::robot_comm::robot_SpecialCommandRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::robot_comm::robot_SpecialCommandRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::robot_comm::robot_SpecialCommandRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "35641a14d68eae4e3f43fd2e5282cc04";
  }

  static const char* value(const  ::robot_comm::robot_SpecialCommandRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x35641a14d68eae4eULL;
  static const uint64_t static_value2 = 0x3f43fd2e5282cc04ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_comm::robot_SpecialCommandRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robot_comm/robot_SpecialCommandRequest";
  }

  static const char* value(const  ::robot_comm::robot_SpecialCommandRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::robot_comm::robot_SpecialCommandRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
int64 command\n\
float64 param1\n\
float64 param2\n\
float64 param3\n\
float64 param4\n\
float64 param5\n\
\n\
";
  }

  static const char* value(const  ::robot_comm::robot_SpecialCommandRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::robot_comm::robot_SpecialCommandRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::robot_comm::robot_SpecialCommandResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::robot_comm::robot_SpecialCommandResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::robot_comm::robot_SpecialCommandResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1e32786be6359fbbb6259aee4f579d10";
  }

  static const char* value(const  ::robot_comm::robot_SpecialCommandResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x1e32786be6359fbbULL;
  static const uint64_t static_value2 = 0xb6259aee4f579d10ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_comm::robot_SpecialCommandResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robot_comm/robot_SpecialCommandResponse";
  }

  static const char* value(const  ::robot_comm::robot_SpecialCommandResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::robot_comm::robot_SpecialCommandResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int64 ret\n\
string msg\n\
\n\
\n\
";
  }

  static const char* value(const  ::robot_comm::robot_SpecialCommandResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::robot_comm::robot_SpecialCommandRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.command);
    stream.next(m.param1);
    stream.next(m.param2);
    stream.next(m.param3);
    stream.next(m.param4);
    stream.next(m.param5);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct robot_SpecialCommandRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::robot_comm::robot_SpecialCommandResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.ret);
    stream.next(m.msg);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct robot_SpecialCommandResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<robot_comm::robot_SpecialCommand> {
  static const char* value() 
  {
    return "dd470c01f667d001d212037b2fe2c918";
  }

  static const char* value(const robot_comm::robot_SpecialCommand&) { return value(); } 
};

template<>
struct DataType<robot_comm::robot_SpecialCommand> {
  static const char* value() 
  {
    return "robot_comm/robot_SpecialCommand";
  }

  static const char* value(const robot_comm::robot_SpecialCommand&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<robot_comm::robot_SpecialCommandRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "dd470c01f667d001d212037b2fe2c918";
  }

  static const char* value(const robot_comm::robot_SpecialCommandRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<robot_comm::robot_SpecialCommandRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robot_comm/robot_SpecialCommand";
  }

  static const char* value(const robot_comm::robot_SpecialCommandRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<robot_comm::robot_SpecialCommandResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "dd470c01f667d001d212037b2fe2c918";
  }

  static const char* value(const robot_comm::robot_SpecialCommandResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<robot_comm::robot_SpecialCommandResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robot_comm/robot_SpecialCommand";
  }

  static const char* value(const robot_comm::robot_SpecialCommandResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // ROBOT_COMM_SERVICE_ROBOT_SPECIALCOMMAND_H

