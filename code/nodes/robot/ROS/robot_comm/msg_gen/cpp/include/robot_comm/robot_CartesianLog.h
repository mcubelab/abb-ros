/* Auto-generated by genmsg_cpp for file /home/mcube/hands_MLab/code/nodes/robot/ROS/robot_comm/msg/robot_CartesianLog.msg */
#ifndef ROBOT_COMM_MESSAGE_ROBOT_CARTESIANLOG_H
#define ROBOT_COMM_MESSAGE_ROBOT_CARTESIANLOG_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace robot_comm
{
template <class ContainerAllocator>
struct robot_CartesianLog_ {
  typedef robot_CartesianLog_<ContainerAllocator> Type;

  robot_CartesianLog_()
  : date()
  , time()
  , timeStamp(0.0)
  , x(0.0)
  , y(0.0)
  , z(0.0)
  , q0(0.0)
  , qx(0.0)
  , qy(0.0)
  , qz(0.0)
  {
  }

  robot_CartesianLog_(const ContainerAllocator& _alloc)
  : date(_alloc)
  , time(_alloc)
  , timeStamp(0.0)
  , x(0.0)
  , y(0.0)
  , z(0.0)
  , q0(0.0)
  , qx(0.0)
  , qy(0.0)
  , qz(0.0)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _date_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  date;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _time_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  time;

  typedef double _timeStamp_type;
  double timeStamp;

  typedef double _x_type;
  double x;

  typedef double _y_type;
  double y;

  typedef double _z_type;
  double z;

  typedef double _q0_type;
  double q0;

  typedef double _qx_type;
  double qx;

  typedef double _qy_type;
  double qy;

  typedef double _qz_type;
  double qz;


  typedef boost::shared_ptr< ::robot_comm::robot_CartesianLog_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_comm::robot_CartesianLog_<ContainerAllocator>  const> ConstPtr;
}; // struct robot_CartesianLog
typedef  ::robot_comm::robot_CartesianLog_<std::allocator<void> > robot_CartesianLog;

typedef boost::shared_ptr< ::robot_comm::robot_CartesianLog> robot_CartesianLogPtr;
typedef boost::shared_ptr< ::robot_comm::robot_CartesianLog const> robot_CartesianLogConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::robot_comm::robot_CartesianLog_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::robot_comm::robot_CartesianLog_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace robot_comm

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::robot_comm::robot_CartesianLog_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::robot_comm::robot_CartesianLog_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::robot_comm::robot_CartesianLog_<ContainerAllocator> > {
  static const char* value() 
  {
    return "eb2bb667c61dcbf678b5f4ff08b7284e";
  }

  static const char* value(const  ::robot_comm::robot_CartesianLog_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xeb2bb667c61dcbf6ULL;
  static const uint64_t static_value2 = 0x78b5f4ff08b7284eULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_comm::robot_CartesianLog_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robot_comm/robot_CartesianLog";
  }

  static const char* value(const  ::robot_comm::robot_CartesianLog_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::robot_comm::robot_CartesianLog_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string date\n\
string time\n\
float64 timeStamp\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 q0\n\
float64 qx\n\
float64 qy\n\
float64 qz\n\
";
  }

  static const char* value(const  ::robot_comm::robot_CartesianLog_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::robot_comm::robot_CartesianLog_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.date);
    stream.next(m.time);
    stream.next(m.timeStamp);
    stream.next(m.x);
    stream.next(m.y);
    stream.next(m.z);
    stream.next(m.q0);
    stream.next(m.qx);
    stream.next(m.qy);
    stream.next(m.qz);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct robot_CartesianLog_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_comm::robot_CartesianLog_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::robot_comm::robot_CartesianLog_<ContainerAllocator> & v) 
  {
    s << indent << "date: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.date);
    s << indent << "time: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.time);
    s << indent << "timeStamp: ";
    Printer<double>::stream(s, indent + "  ", v.timeStamp);
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<double>::stream(s, indent + "  ", v.z);
    s << indent << "q0: ";
    Printer<double>::stream(s, indent + "  ", v.q0);
    s << indent << "qx: ";
    Printer<double>::stream(s, indent + "  ", v.qx);
    s << indent << "qy: ";
    Printer<double>::stream(s, indent + "  ", v.qy);
    s << indent << "qz: ";
    Printer<double>::stream(s, indent + "  ", v.qz);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ROBOT_COMM_MESSAGE_ROBOT_CARTESIANLOG_H

