"""autogenerated by genpy from robot_comm/robot_ForceLog.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class robot_ForceLog(genpy.Message):
  _md5sum = "e69a688c0d45a806a3e0dc3ba264486c"
  _type = "robot_comm/robot_ForceLog"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string date
string time
float64 timeStamp
float64 fx
float64 fy
float64 fz
float64 tx
float64 ty
float64 tz

"""
  __slots__ = ['date','time','timeStamp','fx','fy','fz','tx','ty','tz']
  _slot_types = ['string','string','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       date,time,timeStamp,fx,fy,fz,tx,ty,tz

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(robot_ForceLog, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.date is None:
        self.date = ''
      if self.time is None:
        self.time = ''
      if self.timeStamp is None:
        self.timeStamp = 0.
      if self.fx is None:
        self.fx = 0.
      if self.fy is None:
        self.fy = 0.
      if self.fz is None:
        self.fz = 0.
      if self.tx is None:
        self.tx = 0.
      if self.ty is None:
        self.ty = 0.
      if self.tz is None:
        self.tz = 0.
    else:
      self.date = ''
      self.time = ''
      self.timeStamp = 0.
      self.fx = 0.
      self.fy = 0.
      self.fz = 0.
      self.tx = 0.
      self.ty = 0.
      self.tz = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.date
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.time
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d.pack(_x.timeStamp, _x.fx, _x.fy, _x.fz, _x.tx, _x.ty, _x.tz))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.date = str[start:end].decode('utf-8')
      else:
        self.date = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.time = str[start:end].decode('utf-8')
      else:
        self.time = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.timeStamp, _x.fx, _x.fy, _x.fz, _x.tx, _x.ty, _x.tz,) = _struct_7d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.date
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.time
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d.pack(_x.timeStamp, _x.fx, _x.fy, _x.fz, _x.tx, _x.ty, _x.tz))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.date = str[start:end].decode('utf-8')
      else:
        self.date = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.time = str[start:end].decode('utf-8')
      else:
        self.time = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.timeStamp, _x.fx, _x.fy, _x.fz, _x.tx, _x.ty, _x.tz,) = _struct_7d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_7d = struct.Struct("<7d")
