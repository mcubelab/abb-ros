/* Auto-generated by genmsg_cpp for file /home/mcube/hands_MLab/code/nodes/vision/ROS/vision_comm/srv/CalibrateVision.srv */
#ifndef VISION_COMM_SERVICE_CALIBRATEVISION_H
#define VISION_COMM_SERVICE_CALIBRATEVISION_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "std_msgs/Header.h"



namespace vision_comm
{
template <class ContainerAllocator>
struct CalibrateVisionRequest_ {
  typedef CalibrateVisionRequest_<ContainerAllocator> Type;

  CalibrateVisionRequest_()
  : header()
  , captureNew(false)
  , cameraNum(0)
  , calibrationFilename()
  {
  }

  CalibrateVisionRequest_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , captureNew(false)
  , cameraNum(0)
  , calibrationFilename(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef uint8_t _captureNew_type;
  uint8_t captureNew;

  typedef int32_t _cameraNum_type;
  int32_t cameraNum;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _calibrationFilename_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  calibrationFilename;


  typedef boost::shared_ptr< ::vision_comm::CalibrateVisionRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vision_comm::CalibrateVisionRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct CalibrateVisionRequest
typedef  ::vision_comm::CalibrateVisionRequest_<std::allocator<void> > CalibrateVisionRequest;

typedef boost::shared_ptr< ::vision_comm::CalibrateVisionRequest> CalibrateVisionRequestPtr;
typedef boost::shared_ptr< ::vision_comm::CalibrateVisionRequest const> CalibrateVisionRequestConstPtr;



template <class ContainerAllocator>
struct CalibrateVisionResponse_ {
  typedef CalibrateVisionResponse_<ContainerAllocator> Type;

  CalibrateVisionResponse_()
  : response()
  {
  }

  CalibrateVisionResponse_(const ContainerAllocator& _alloc)
  : response(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _response_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  response;


  typedef boost::shared_ptr< ::vision_comm::CalibrateVisionResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vision_comm::CalibrateVisionResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct CalibrateVisionResponse
typedef  ::vision_comm::CalibrateVisionResponse_<std::allocator<void> > CalibrateVisionResponse;

typedef boost::shared_ptr< ::vision_comm::CalibrateVisionResponse> CalibrateVisionResponsePtr;
typedef boost::shared_ptr< ::vision_comm::CalibrateVisionResponse const> CalibrateVisionResponseConstPtr;


struct CalibrateVision
{

typedef CalibrateVisionRequest Request;
typedef CalibrateVisionResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct CalibrateVision
} // namespace vision_comm

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vision_comm::CalibrateVisionRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vision_comm::CalibrateVisionRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vision_comm::CalibrateVisionRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ea523cadc3997d1db03c2d99d58ac0f1";
  }

  static const char* value(const  ::vision_comm::CalibrateVisionRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xea523cadc3997d1dULL;
  static const uint64_t static_value2 = 0xb03c2d99d58ac0f1ULL;
};

template<class ContainerAllocator>
struct DataType< ::vision_comm::CalibrateVisionRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vision_comm/CalibrateVisionRequest";
  }

  static const char* value(const  ::vision_comm::CalibrateVisionRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vision_comm::CalibrateVisionRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
\n\
bool captureNew\n\
int32 cameraNum\n\
\n\
\n\
\n\
\n\
\n\
\n\
string calibrationFilename\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::vision_comm::CalibrateVisionRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::vision_comm::CalibrateVisionRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::vision_comm::CalibrateVisionRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vision_comm::CalibrateVisionResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vision_comm::CalibrateVisionResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vision_comm::CalibrateVisionResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6de314e2dc76fbff2b6244a6ad70b68d";
  }

  static const char* value(const  ::vision_comm::CalibrateVisionResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x6de314e2dc76fbffULL;
  static const uint64_t static_value2 = 0x2b6244a6ad70b68dULL;
};

template<class ContainerAllocator>
struct DataType< ::vision_comm::CalibrateVisionResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vision_comm/CalibrateVisionResponse";
  }

  static const char* value(const  ::vision_comm::CalibrateVisionResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vision_comm::CalibrateVisionResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string response\n\
\n\
\n\
";
  }

  static const char* value(const  ::vision_comm::CalibrateVisionResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vision_comm::CalibrateVisionRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.captureNew);
    stream.next(m.cameraNum);
    stream.next(m.calibrationFilename);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CalibrateVisionRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vision_comm::CalibrateVisionResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.response);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CalibrateVisionResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<vision_comm::CalibrateVision> {
  static const char* value() 
  {
    return "e7d577b66bbc0556d6ba1c6165a366b2";
  }

  static const char* value(const vision_comm::CalibrateVision&) { return value(); } 
};

template<>
struct DataType<vision_comm::CalibrateVision> {
  static const char* value() 
  {
    return "vision_comm/CalibrateVision";
  }

  static const char* value(const vision_comm::CalibrateVision&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<vision_comm::CalibrateVisionRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e7d577b66bbc0556d6ba1c6165a366b2";
  }

  static const char* value(const vision_comm::CalibrateVisionRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<vision_comm::CalibrateVisionRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vision_comm/CalibrateVision";
  }

  static const char* value(const vision_comm::CalibrateVisionRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<vision_comm::CalibrateVisionResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e7d577b66bbc0556d6ba1c6165a366b2";
  }

  static const char* value(const vision_comm::CalibrateVisionResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<vision_comm::CalibrateVisionResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vision_comm/CalibrateVision";
  }

  static const char* value(const vision_comm::CalibrateVisionResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // VISION_COMM_SERVICE_CALIBRATEVISION_H

