/* Auto-generated by genmsg_cpp for file /home/mcube/hands_MLab/code/nodes/vision/ROS/vision_comm/srv/DropDetect.srv */
#ifndef VISION_COMM_SERVICE_DROPDETECT_H
#define VISION_COMM_SERVICE_DROPDETECT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "std_msgs/Header.h"



namespace vision_comm
{
template <class ContainerAllocator>
struct DropDetectRequest_ {
  typedef DropDetectRequest_<ContainerAllocator> Type;

  DropDetectRequest_()
  : header()
  , filename()
  {
  }

  DropDetectRequest_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , filename(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _filename_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  filename;


  typedef boost::shared_ptr< ::vision_comm::DropDetectRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vision_comm::DropDetectRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct DropDetectRequest
typedef  ::vision_comm::DropDetectRequest_<std::allocator<void> > DropDetectRequest;

typedef boost::shared_ptr< ::vision_comm::DropDetectRequest> DropDetectRequestPtr;
typedef boost::shared_ptr< ::vision_comm::DropDetectRequest const> DropDetectRequestConstPtr;



template <class ContainerAllocator>
struct DropDetectResponse_ {
  typedef DropDetectResponse_<ContainerAllocator> Type;

  DropDetectResponse_()
  : success(false)
  {
  }

  DropDetectResponse_(const ContainerAllocator& _alloc)
  : success(false)
  {
  }

  typedef uint8_t _success_type;
  uint8_t success;


  typedef boost::shared_ptr< ::vision_comm::DropDetectResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vision_comm::DropDetectResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct DropDetectResponse
typedef  ::vision_comm::DropDetectResponse_<std::allocator<void> > DropDetectResponse;

typedef boost::shared_ptr< ::vision_comm::DropDetectResponse> DropDetectResponsePtr;
typedef boost::shared_ptr< ::vision_comm::DropDetectResponse const> DropDetectResponseConstPtr;


struct DropDetect
{

typedef DropDetectRequest Request;
typedef DropDetectResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct DropDetect
} // namespace vision_comm

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vision_comm::DropDetectRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vision_comm::DropDetectRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vision_comm::DropDetectRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "37e6a3edab305e40b07540994cd1b883";
  }

  static const char* value(const  ::vision_comm::DropDetectRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x37e6a3edab305e40ULL;
  static const uint64_t static_value2 = 0xb07540994cd1b883ULL;
};

template<class ContainerAllocator>
struct DataType< ::vision_comm::DropDetectRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vision_comm/DropDetectRequest";
  }

  static const char* value(const  ::vision_comm::DropDetectRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vision_comm::DropDetectRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
\n\
string filename\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::vision_comm::DropDetectRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::vision_comm::DropDetectRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::vision_comm::DropDetectRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vision_comm::DropDetectResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vision_comm::DropDetectResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vision_comm::DropDetectResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "358e233cde0c8a8bcfea4ce193f8fc15";
  }

  static const char* value(const  ::vision_comm::DropDetectResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x358e233cde0c8a8bULL;
  static const uint64_t static_value2 = 0xcfea4ce193f8fc15ULL;
};

template<class ContainerAllocator>
struct DataType< ::vision_comm::DropDetectResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vision_comm/DropDetectResponse";
  }

  static const char* value(const  ::vision_comm::DropDetectResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vision_comm::DropDetectResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool success\n\
\n\
\n\
";
  }

  static const char* value(const  ::vision_comm::DropDetectResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::vision_comm::DropDetectResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vision_comm::DropDetectRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.filename);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct DropDetectRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vision_comm::DropDetectResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.success);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct DropDetectResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<vision_comm::DropDetect> {
  static const char* value() 
  {
    return "75e106f1bb8a88f6b8f0c3d82213e7db";
  }

  static const char* value(const vision_comm::DropDetect&) { return value(); } 
};

template<>
struct DataType<vision_comm::DropDetect> {
  static const char* value() 
  {
    return "vision_comm/DropDetect";
  }

  static const char* value(const vision_comm::DropDetect&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<vision_comm::DropDetectRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "75e106f1bb8a88f6b8f0c3d82213e7db";
  }

  static const char* value(const vision_comm::DropDetectRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<vision_comm::DropDetectRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vision_comm/DropDetect";
  }

  static const char* value(const vision_comm::DropDetectRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<vision_comm::DropDetectResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "75e106f1bb8a88f6b8f0c3d82213e7db";
  }

  static const char* value(const vision_comm::DropDetectResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<vision_comm::DropDetectResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vision_comm/DropDetect";
  }

  static const char* value(const vision_comm::DropDetectResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // VISION_COMM_SERVICE_DROPDETECT_H

