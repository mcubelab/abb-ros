/* Auto-generated by genmsg_cpp for file /home/mcube/hands_MLab/code/nodes/vision/ROS/objRec_comm/srv/objRec_GetObjFromViews.srv */
#ifndef OBJREC_COMM_SERVICE_OBJREC_GETOBJFROMVIEWS_H
#define OBJREC_COMM_SERVICE_OBJREC_GETOBJFROMVIEWS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace objRec_comm
{
template <class ContainerAllocator>
struct objRec_GetObjFromViewsRequest_ {
  typedef objRec_GetObjFromViewsRequest_<ContainerAllocator> Type;

  objRec_GetObjFromViewsRequest_()
  : num_views(0)
  , filenames()
  , trans()
  , quat()
  , cameraName()
  {
  }

  objRec_GetObjFromViewsRequest_(const ContainerAllocator& _alloc)
  : num_views(0)
  , filenames(_alloc)
  , trans(_alloc)
  , quat(_alloc)
  , cameraName(_alloc)
  {
  }

  typedef int64_t _num_views_type;
  int64_t num_views;

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _filenames_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  filenames;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _trans_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  trans;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _quat_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  quat;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _cameraName_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  cameraName;


  typedef boost::shared_ptr< ::objRec_comm::objRec_GetObjFromViewsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::objRec_comm::objRec_GetObjFromViewsRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct objRec_GetObjFromViewsRequest
typedef  ::objRec_comm::objRec_GetObjFromViewsRequest_<std::allocator<void> > objRec_GetObjFromViewsRequest;

typedef boost::shared_ptr< ::objRec_comm::objRec_GetObjFromViewsRequest> objRec_GetObjFromViewsRequestPtr;
typedef boost::shared_ptr< ::objRec_comm::objRec_GetObjFromViewsRequest const> objRec_GetObjFromViewsRequestConstPtr;



template <class ContainerAllocator>
struct objRec_GetObjFromViewsResponse_ {
  typedef objRec_GetObjFromViewsResponse_<ContainerAllocator> Type;

  objRec_GetObjFromViewsResponse_()
  : objNum(0)
  , trans()
  , quat()
  , ret(0)
  , msg()
  {
    trans.assign(0.0);
    quat.assign(0.0);
  }

  objRec_GetObjFromViewsResponse_(const ContainerAllocator& _alloc)
  : objNum(0)
  , trans()
  , quat()
  , ret(0)
  , msg(_alloc)
  {
    trans.assign(0.0);
    quat.assign(0.0);
  }

  typedef int64_t _objNum_type;
  int64_t objNum;

  typedef boost::array<double, 3>  _trans_type;
  boost::array<double, 3>  trans;

  typedef boost::array<double, 4>  _quat_type;
  boost::array<double, 4>  quat;

  typedef int64_t _ret_type;
  int64_t ret;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _msg_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  msg;


  typedef boost::shared_ptr< ::objRec_comm::objRec_GetObjFromViewsResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::objRec_comm::objRec_GetObjFromViewsResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct objRec_GetObjFromViewsResponse
typedef  ::objRec_comm::objRec_GetObjFromViewsResponse_<std::allocator<void> > objRec_GetObjFromViewsResponse;

typedef boost::shared_ptr< ::objRec_comm::objRec_GetObjFromViewsResponse> objRec_GetObjFromViewsResponsePtr;
typedef boost::shared_ptr< ::objRec_comm::objRec_GetObjFromViewsResponse const> objRec_GetObjFromViewsResponseConstPtr;


struct objRec_GetObjFromViews
{

typedef objRec_GetObjFromViewsRequest Request;
typedef objRec_GetObjFromViewsResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct objRec_GetObjFromViews
} // namespace objRec_comm

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::objRec_comm::objRec_GetObjFromViewsRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::objRec_comm::objRec_GetObjFromViewsRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::objRec_comm::objRec_GetObjFromViewsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1e32dcb150e10d602e7cf75be82ab757";
  }

  static const char* value(const  ::objRec_comm::objRec_GetObjFromViewsRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x1e32dcb150e10d60ULL;
  static const uint64_t static_value2 = 0x2e7cf75be82ab757ULL;
};

template<class ContainerAllocator>
struct DataType< ::objRec_comm::objRec_GetObjFromViewsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "objRec_comm/objRec_GetObjFromViewsRequest";
  }

  static const char* value(const  ::objRec_comm::objRec_GetObjFromViewsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::objRec_comm::objRec_GetObjFromViewsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
int64 num_views\n\
string[] filenames\n\
float64[] trans\n\
float64[] quat\n\
string cameraName\n\
\n\
\n\
";
  }

  static const char* value(const  ::objRec_comm::objRec_GetObjFromViewsRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::objRec_comm::objRec_GetObjFromViewsResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::objRec_comm::objRec_GetObjFromViewsResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::objRec_comm::objRec_GetObjFromViewsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b186504864a83ccde76a159b5fa419be";
  }

  static const char* value(const  ::objRec_comm::objRec_GetObjFromViewsResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xb186504864a83ccdULL;
  static const uint64_t static_value2 = 0xe76a159b5fa419beULL;
};

template<class ContainerAllocator>
struct DataType< ::objRec_comm::objRec_GetObjFromViewsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "objRec_comm/objRec_GetObjFromViewsResponse";
  }

  static const char* value(const  ::objRec_comm::objRec_GetObjFromViewsResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::objRec_comm::objRec_GetObjFromViewsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
int64 objNum\n\
float64[3] trans\n\
float64[4] quat\n\
\n\
int64 ret\n\
string msg\n\
\n\
\n\
";
  }

  static const char* value(const  ::objRec_comm::objRec_GetObjFromViewsResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::objRec_comm::objRec_GetObjFromViewsRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.num_views);
    stream.next(m.filenames);
    stream.next(m.trans);
    stream.next(m.quat);
    stream.next(m.cameraName);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct objRec_GetObjFromViewsRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::objRec_comm::objRec_GetObjFromViewsResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.objNum);
    stream.next(m.trans);
    stream.next(m.quat);
    stream.next(m.ret);
    stream.next(m.msg);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct objRec_GetObjFromViewsResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<objRec_comm::objRec_GetObjFromViews> {
  static const char* value() 
  {
    return "453a5f03ce1a74336cfcfa98941fb02c";
  }

  static const char* value(const objRec_comm::objRec_GetObjFromViews&) { return value(); } 
};

template<>
struct DataType<objRec_comm::objRec_GetObjFromViews> {
  static const char* value() 
  {
    return "objRec_comm/objRec_GetObjFromViews";
  }

  static const char* value(const objRec_comm::objRec_GetObjFromViews&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<objRec_comm::objRec_GetObjFromViewsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "453a5f03ce1a74336cfcfa98941fb02c";
  }

  static const char* value(const objRec_comm::objRec_GetObjFromViewsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<objRec_comm::objRec_GetObjFromViewsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "objRec_comm/objRec_GetObjFromViews";
  }

  static const char* value(const objRec_comm::objRec_GetObjFromViewsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<objRec_comm::objRec_GetObjFromViewsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "453a5f03ce1a74336cfcfa98941fb02c";
  }

  static const char* value(const objRec_comm::objRec_GetObjFromViewsResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<objRec_comm::objRec_GetObjFromViewsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "objRec_comm/objRec_GetObjFromViews";
  }

  static const char* value(const objRec_comm::objRec_GetObjFromViewsResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // OBJREC_COMM_SERVICE_OBJREC_GETOBJFROMVIEWS_H

