/* Auto-generated by genmsg_cpp for file /home/mcube/hands_MLab/code/nodes/vision/ROS/objRec_comm/srv/objRec_GetObject.srv */
#ifndef OBJREC_COMM_SERVICE_OBJREC_GETOBJECT_H
#define OBJREC_COMM_SERVICE_OBJREC_GETOBJECT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace objRec_comm
{
template <class ContainerAllocator>
struct objRec_GetObjectRequest_ {
  typedef objRec_GetObjectRequest_<ContainerAllocator> Type;

  objRec_GetObjectRequest_()
  : filename()
  , cameraName()
  , onTable(false)
  {
  }

  objRec_GetObjectRequest_(const ContainerAllocator& _alloc)
  : filename(_alloc)
  , cameraName(_alloc)
  , onTable(false)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _filename_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  filename;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _cameraName_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  cameraName;

  typedef uint8_t _onTable_type;
  uint8_t onTable;


  typedef boost::shared_ptr< ::objRec_comm::objRec_GetObjectRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::objRec_comm::objRec_GetObjectRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct objRec_GetObjectRequest
typedef  ::objRec_comm::objRec_GetObjectRequest_<std::allocator<void> > objRec_GetObjectRequest;

typedef boost::shared_ptr< ::objRec_comm::objRec_GetObjectRequest> objRec_GetObjectRequestPtr;
typedef boost::shared_ptr< ::objRec_comm::objRec_GetObjectRequest const> objRec_GetObjectRequestConstPtr;



template <class ContainerAllocator>
struct objRec_GetObjectResponse_ {
  typedef objRec_GetObjectResponse_<ContainerAllocator> Type;

  objRec_GetObjectResponse_()
  : objNum(0)
  , trans()
  , quat()
  , ret(0)
  , msg()
  {
    trans.assign(0.0);
    quat.assign(0.0);
  }

  objRec_GetObjectResponse_(const ContainerAllocator& _alloc)
  : objNum(0)
  , trans()
  , quat()
  , ret(0)
  , msg(_alloc)
  {
    trans.assign(0.0);
    quat.assign(0.0);
  }

  typedef int64_t _objNum_type;
  int64_t objNum;

  typedef boost::array<double, 3>  _trans_type;
  boost::array<double, 3>  trans;

  typedef boost::array<double, 4>  _quat_type;
  boost::array<double, 4>  quat;

  typedef int64_t _ret_type;
  int64_t ret;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _msg_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  msg;


  typedef boost::shared_ptr< ::objRec_comm::objRec_GetObjectResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::objRec_comm::objRec_GetObjectResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct objRec_GetObjectResponse
typedef  ::objRec_comm::objRec_GetObjectResponse_<std::allocator<void> > objRec_GetObjectResponse;

typedef boost::shared_ptr< ::objRec_comm::objRec_GetObjectResponse> objRec_GetObjectResponsePtr;
typedef boost::shared_ptr< ::objRec_comm::objRec_GetObjectResponse const> objRec_GetObjectResponseConstPtr;


struct objRec_GetObject
{

typedef objRec_GetObjectRequest Request;
typedef objRec_GetObjectResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct objRec_GetObject
} // namespace objRec_comm

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::objRec_comm::objRec_GetObjectRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::objRec_comm::objRec_GetObjectRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::objRec_comm::objRec_GetObjectRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1b4292c8a1b43354da04676ef9d1dda9";
  }

  static const char* value(const  ::objRec_comm::objRec_GetObjectRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x1b4292c8a1b43354ULL;
  static const uint64_t static_value2 = 0xda04676ef9d1dda9ULL;
};

template<class ContainerAllocator>
struct DataType< ::objRec_comm::objRec_GetObjectRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "objRec_comm/objRec_GetObjectRequest";
  }

  static const char* value(const  ::objRec_comm::objRec_GetObjectRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::objRec_comm::objRec_GetObjectRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
string filename\n\
\n\
string cameraName\n\
\n\
bool onTable\n\
\n\
\n\
";
  }

  static const char* value(const  ::objRec_comm::objRec_GetObjectRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::objRec_comm::objRec_GetObjectResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::objRec_comm::objRec_GetObjectResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::objRec_comm::objRec_GetObjectResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b186504864a83ccde76a159b5fa419be";
  }

  static const char* value(const  ::objRec_comm::objRec_GetObjectResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xb186504864a83ccdULL;
  static const uint64_t static_value2 = 0xe76a159b5fa419beULL;
};

template<class ContainerAllocator>
struct DataType< ::objRec_comm::objRec_GetObjectResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "objRec_comm/objRec_GetObjectResponse";
  }

  static const char* value(const  ::objRec_comm::objRec_GetObjectResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::objRec_comm::objRec_GetObjectResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
int64 objNum\n\
float64[3] trans\n\
float64[4] quat\n\
\n\
int64 ret\n\
string msg\n\
\n\
\n\
";
  }

  static const char* value(const  ::objRec_comm::objRec_GetObjectResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::objRec_comm::objRec_GetObjectRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.filename);
    stream.next(m.cameraName);
    stream.next(m.onTable);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct objRec_GetObjectRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::objRec_comm::objRec_GetObjectResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.objNum);
    stream.next(m.trans);
    stream.next(m.quat);
    stream.next(m.ret);
    stream.next(m.msg);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct objRec_GetObjectResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<objRec_comm::objRec_GetObject> {
  static const char* value() 
  {
    return "91650f8c373d26a2f3629b3e8c8f5cfe";
  }

  static const char* value(const objRec_comm::objRec_GetObject&) { return value(); } 
};

template<>
struct DataType<objRec_comm::objRec_GetObject> {
  static const char* value() 
  {
    return "objRec_comm/objRec_GetObject";
  }

  static const char* value(const objRec_comm::objRec_GetObject&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<objRec_comm::objRec_GetObjectRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "91650f8c373d26a2f3629b3e8c8f5cfe";
  }

  static const char* value(const objRec_comm::objRec_GetObjectRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<objRec_comm::objRec_GetObjectRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "objRec_comm/objRec_GetObject";
  }

  static const char* value(const objRec_comm::objRec_GetObjectRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<objRec_comm::objRec_GetObjectResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "91650f8c373d26a2f3629b3e8c8f5cfe";
  }

  static const char* value(const objRec_comm::objRec_GetObjectResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<objRec_comm::objRec_GetObjectResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "objRec_comm/objRec_GetObject";
  }

  static const char* value(const objRec_comm::objRec_GetObjectResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // OBJREC_COMM_SERVICE_OBJREC_GETOBJECT_H

