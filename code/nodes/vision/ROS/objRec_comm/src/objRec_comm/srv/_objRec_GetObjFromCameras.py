"""autogenerated by genpy from objRec_comm/objRec_GetObjFromCamerasRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class objRec_GetObjFromCamerasRequest(genpy.Message):
  _md5sum = "f432f1699ffc9f94c404e83f4c61eb95"
  _type = "objRec_comm/objRec_GetObjFromCamerasRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int64 num_cameras
string[] filenames
string[] cameraNames
bool onTable


"""
  __slots__ = ['num_cameras','filenames','cameraNames','onTable']
  _slot_types = ['int64','string[]','string[]','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       num_cameras,filenames,cameraNames,onTable

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(objRec_GetObjFromCamerasRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.num_cameras is None:
        self.num_cameras = 0
      if self.filenames is None:
        self.filenames = []
      if self.cameraNames is None:
        self.cameraNames = []
      if self.onTable is None:
        self.onTable = False
    else:
      self.num_cameras = 0
      self.filenames = []
      self.cameraNames = []
      self.onTable = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_q.pack(self.num_cameras))
      length = len(self.filenames)
      buff.write(_struct_I.pack(length))
      for val1 in self.filenames:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *val1))
        else:
          buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.cameraNames)
      buff.write(_struct_I.pack(length))
      for val1 in self.cameraNames:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *val1))
        else:
          buff.write(struct.pack('<I%ss'%length, length, val1))
      buff.write(_struct_B.pack(self.onTable))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 8
      (self.num_cameras,) = _struct_q.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.filenames = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.filenames.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.cameraNames = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.cameraNames.append(val1)
      start = end
      end += 1
      (self.onTable,) = _struct_B.unpack(str[start:end])
      self.onTable = bool(self.onTable)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_q.pack(self.num_cameras))
      length = len(self.filenames)
      buff.write(_struct_I.pack(length))
      for val1 in self.filenames:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *val1))
        else:
          buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.cameraNames)
      buff.write(_struct_I.pack(length))
      for val1 in self.cameraNames:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *val1))
        else:
          buff.write(struct.pack('<I%ss'%length, length, val1))
      buff.write(_struct_B.pack(self.onTable))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 8
      (self.num_cameras,) = _struct_q.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.filenames = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.filenames.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.cameraNames = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.cameraNames.append(val1)
      start = end
      end += 1
      (self.onTable,) = _struct_B.unpack(str[start:end])
      self.onTable = bool(self.onTable)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_q = struct.Struct("<q")
_struct_B = struct.Struct("<B")
"""autogenerated by genpy from objRec_comm/objRec_GetObjFromCamerasResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class objRec_GetObjFromCamerasResponse(genpy.Message):
  _md5sum = "b186504864a83ccde76a159b5fa419be"
  _type = "objRec_comm/objRec_GetObjFromCamerasResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
int64 objNum
float64[3] trans
float64[4] quat

int64 ret
string msg


"""
  __slots__ = ['objNum','trans','quat','ret','msg']
  _slot_types = ['int64','float64[3]','float64[4]','int64','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       objNum,trans,quat,ret,msg

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(objRec_GetObjFromCamerasResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.objNum is None:
        self.objNum = 0
      if self.trans is None:
        self.trans = [0.,0.,0.]
      if self.quat is None:
        self.quat = [0.,0.,0.,0.]
      if self.ret is None:
        self.ret = 0
      if self.msg is None:
        self.msg = ''
    else:
      self.objNum = 0
      self.trans = [0.,0.,0.]
      self.quat = [0.,0.,0.,0.]
      self.ret = 0
      self.msg = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_q.pack(self.objNum))
      buff.write(_struct_3d.pack(*self.trans))
      buff.write(_struct_4d.pack(*self.quat))
      buff.write(_struct_q.pack(self.ret))
      _x = self.msg
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 8
      (self.objNum,) = _struct_q.unpack(str[start:end])
      start = end
      end += 24
      self.trans = _struct_3d.unpack(str[start:end])
      start = end
      end += 32
      self.quat = _struct_4d.unpack(str[start:end])
      start = end
      end += 8
      (self.ret,) = _struct_q.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.msg = str[start:end].decode('utf-8')
      else:
        self.msg = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_q.pack(self.objNum))
      buff.write(self.trans.tostring())
      buff.write(self.quat.tostring())
      buff.write(_struct_q.pack(self.ret))
      _x = self.msg
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 8
      (self.objNum,) = _struct_q.unpack(str[start:end])
      start = end
      end += 24
      self.trans = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 32
      self.quat = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
      start = end
      end += 8
      (self.ret,) = _struct_q.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.msg = str[start:end].decode('utf-8')
      else:
        self.msg = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_q = struct.Struct("<q")
_struct_4d = struct.Struct("<4d")
_struct_3d = struct.Struct("<3d")
class objRec_GetObjFromCameras(object):
  _type          = 'objRec_comm/objRec_GetObjFromCameras'
  _md5sum = '02d91c3286c6107670c46fdd1fc5535d'
  _request_class  = objRec_GetObjFromCamerasRequest
  _response_class = objRec_GetObjFromCamerasResponse
