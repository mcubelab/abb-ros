/* Auto-generated by genmsg_cpp for file /home/mcube/hands_MLab/code/nodes/vision/ROS/objRec_comm/msg/objRec_ObjPos.msg */
#ifndef OBJREC_COMM_MESSAGE_OBJREC_OBJPOS_H
#define OBJREC_COMM_MESSAGE_OBJREC_OBJPOS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace objRec_comm
{
template <class ContainerAllocator>
struct objRec_ObjPos_ {
  typedef objRec_ObjPos_<ContainerAllocator> Type;

  objRec_ObjPos_()
  : objNum(0)
  , trans()
  , quat()
  {
    trans.assign(0.0);
    quat.assign(0.0);
  }

  objRec_ObjPos_(const ContainerAllocator& _alloc)
  : objNum(0)
  , trans()
  , quat()
  {
    trans.assign(0.0);
    quat.assign(0.0);
  }

  typedef int64_t _objNum_type;
  int64_t objNum;

  typedef boost::array<double, 3>  _trans_type;
  boost::array<double, 3>  trans;

  typedef boost::array<double, 4>  _quat_type;
  boost::array<double, 4>  quat;


  typedef boost::shared_ptr< ::objRec_comm::objRec_ObjPos_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::objRec_comm::objRec_ObjPos_<ContainerAllocator>  const> ConstPtr;
}; // struct objRec_ObjPos
typedef  ::objRec_comm::objRec_ObjPos_<std::allocator<void> > objRec_ObjPos;

typedef boost::shared_ptr< ::objRec_comm::objRec_ObjPos> objRec_ObjPosPtr;
typedef boost::shared_ptr< ::objRec_comm::objRec_ObjPos const> objRec_ObjPosConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::objRec_comm::objRec_ObjPos_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::objRec_comm::objRec_ObjPos_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace objRec_comm

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::objRec_comm::objRec_ObjPos_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::objRec_comm::objRec_ObjPos_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::objRec_comm::objRec_ObjPos_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bf14d19203cfc71676eab1bfd46375f9";
  }

  static const char* value(const  ::objRec_comm::objRec_ObjPos_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xbf14d19203cfc716ULL;
  static const uint64_t static_value2 = 0x76eab1bfd46375f9ULL;
};

template<class ContainerAllocator>
struct DataType< ::objRec_comm::objRec_ObjPos_<ContainerAllocator> > {
  static const char* value() 
  {
    return "objRec_comm/objRec_ObjPos";
  }

  static const char* value(const  ::objRec_comm::objRec_ObjPos_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::objRec_comm::objRec_ObjPos_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# This message is the current pose of an object in the point cloud frame\n\
\n\
int64 objNum\n\
float64[3] trans\n\
float64[4] quat\n\
\n\
";
  }

  static const char* value(const  ::objRec_comm::objRec_ObjPos_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::objRec_comm::objRec_ObjPos_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::objRec_comm::objRec_ObjPos_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.objNum);
    stream.next(m.trans);
    stream.next(m.quat);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct objRec_ObjPos_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::objRec_comm::objRec_ObjPos_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::objRec_comm::objRec_ObjPos_<ContainerAllocator> & v) 
  {
    s << indent << "objNum: ";
    Printer<int64_t>::stream(s, indent + "  ", v.objNum);
    s << indent << "trans[]" << std::endl;
    for (size_t i = 0; i < v.trans.size(); ++i)
    {
      s << indent << "  trans[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.trans[i]);
    }
    s << indent << "quat[]" << std::endl;
    for (size_t i = 0; i < v.quat.size(); ++i)
    {
      s << indent << "  quat[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.quat[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // OBJREC_COMM_MESSAGE_OBJREC_OBJPOS_H

