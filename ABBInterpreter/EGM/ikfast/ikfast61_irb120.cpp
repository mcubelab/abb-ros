/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000048 generated on 2016-04-21 02:20:26.811119
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000048);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)2e-6)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.000005)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[1]);
x4=IKsin(j[2]);
x5=IKsin(j[3]);
x6=IKcos(j[3]);
x7=IKsin(j[0]);
x8=IKcos(j[5]);
x9=IKsin(j[5]);
x10=IKsin(j[4]);
x11=IKcos(j[4]);
x12=((0.302)*x7);
x13=((0.07)*x7);
x14=((1.0)*x10);
x15=((1.0)*x11);
x16=((0.27)*x3);
x17=((1.0)*x7);
x18=((0.072)*x7);
x19=(x10*x6);
x20=(x1*x2);
x21=(x0*x4);
x22=(x0*x5);
x23=(x2*x3);
x24=(x3*x4);
x25=(x1*x4);
x26=((1.0)*x22);
x27=((1.0)*x24);
x28=((((-1.0)*x27))+x20);
x29=((((-1.0)*x23))+(((-1.0)*x25)));
x30=(x28*x5);
x31=(((x0*x23))+((x1*x21)));
x32=(x7*((x25+x23)));
x33=(x11*x28*x6);
x34=(x10*x29);
x35=((((-1.0)*x21*x3))+(((1.0)*x0*x20)));
x36=(x17*(((((-1.0)*x24))+x20)));
x37=(x31*x6);
x38=(x32*x6);
x39=(x10*x35);
x40=(((x31*x5))+(((-1.0)*x17*x6)));
x41=(((x5*x7))+x37);
x42=(((x0*x6))+((x32*x5)));
x43=((((-1.0)*x26))+x38);
x44=(x11*x43);
eerot[0]=(((x8*(((((-1.0)*x15*x41))+(((-1.0)*x14*x35))))))+((x40*x9)));
eerot[1]=(((x9*((((x11*x41))+x39))))+((x40*x8)));
eerot[2]=(((x11*x35))+((x10*(((((-1.0)*x37))+(((-1.0)*x17*x5)))))));
IkReal x45=(x21*x3);
IkReal x46=(x0*x20);
eetrans[0]=(((x10*(((((-1.0)*x18*x5))+(((-0.072)*x37))))))+((x0*x16))+(((0.07)*x0*x23))+(((-0.302)*x45))+((x11*(((((0.072)*x46))+(((-0.072)*x45))))))+(((0.302)*x46))+(((0.07)*x1*x21)));
eerot[3]=(((x8*(((((-1.0)*x15*x43))+(((-1.0)*x14*x36))))))+((x42*x9)));
eerot[4]=(((x42*x8))+((x9*((((x10*x36))+x44)))));
eerot[5]=(((x10*(((((-1.0)*x38))+x26))))+((x11*x36)));
IkReal x47=((1.0)*x24);
eetrans[1]=(((x11*((((x18*x20))+(((-1.0)*x18*x47))))))+((x10*(((((0.072)*x22))+(((-0.072)*x38))))))+((x16*x7))+((x12*x20))+(((-1.0)*x12*x47))+((x13*x23))+((x13*x25)));
eerot[6]=(((x30*x9))+((x8*(((((-1.0)*x34))+(((-1.0)*x33)))))));
eerot[7]=(((x30*x8))+((x9*((x33+x34)))));
eerot[8]=(((x19*(((((-1.0)*x20))+x27))))+((x11*x29)));
eetrans[2]=((0.29)+((x11*(((((-0.072)*x23))+(((-0.072)*x25))))))+((x19*(((((0.072)*x24))+(((-0.072)*x20))))))+(((-0.302)*x23))+(((-0.302)*x25))+(((0.07)*x20))+(((0.27)*x1))+(((-0.07)*x24)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r01;
new_r01=((-1.0)*r00);
new_r02=r02;
new_px=((((-0.072)*r02))+px);
new_r10=r11;
new_r11=((-1.0)*r10);
new_r12=r12;
new_py=((((-0.072)*r12))+py);
new_r20=r21;
new_r21=((-1.0)*r20);
new_r22=r22;
new_pz=((-0.29)+(((-0.072)*r22))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x48=((1.0)*px);
IkReal x49=((1.0)*pz);
IkReal x50=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x50))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x49)));
rxp0_2=((((-1.0)*r10*x48))+((py*r00)));
rxp1_0=((((-1.0)*r21*x50))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x49)));
rxp1_2=((((-1.0)*r11*x48))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x50)));
rxp2_1=((((-1.0)*r02*x49))+((px*r22)));
rxp2_2=((((-1.0)*r12*x48))+((py*r02)));
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
if( (((-1.00956082949184)+(((5.97359133210955)*pp)))) < -1-IKFAST_SINCOS_THRESH || (((-1.00956082949184)+(((5.97359133210955)*pp)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x51=IKasin(((-1.00956082949184)+(((5.97359133210955)*pp))));
j2array[0]=((-2.91382668784903)+(((1.0)*x51)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((0.22776596574076)+(((-1.0)*x51)));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal j0eval[1];
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
j1eval[0]=((1.92857142857143)+cj2+(((2.54243386243386)*(sj2*sj2)))+(((-4.31428571428571)*sj2))+(((2.54243386243386)*(cj2*cj2))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x52=((-0.27)+(((0.302)*sj2))+(((-0.07)*cj2)));
IkReal x53=((((0.302)*cj2))+(((0.07)*sj2)));
CheckValue<IkReal> x56 = IKatan2WithCheck(IkReal(x52),x53,IKFAST_ATAN2_MAGTHRESH);
if(!x56.valid){
continue;
}
IkReal x54=((1.0)*(x56.value));
if((((x52*x52)+(x53*x53))) < -0.00001)
continue;
CheckValue<IkReal> x57=IKPowWithIntegerCheck(IKabs(IKsqrt(((x52*x52)+(x53*x53)))),-1);
if(!x57.valid){
continue;
}
if( ((pz*(x57.value))) < -1-IKFAST_SINCOS_THRESH || ((pz*(x57.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x55=IKasin((pz*(x57.value)));
j1array[0]=((((-1.0)*x54))+(((-1.0)*x55)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+x55+(((-1.0)*x54)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal j0eval[3];
IkReal x58=((35.0)*sj2);
IkReal x59=((151.0)*cj2);
IkReal x60=((500.0)*pz*sj1);
IkReal x61=(((cj1*pp))+(((-1.0)*cj1*(pz*pz))));
j0eval[0]=x61;
j0eval[1]=((IKabs((((px*x58))+((px*x59))+((px*x60)))))+(IKabs((((py*x60))+((py*x58))+((py*x59))))));
j0eval[2]=IKsign(x61);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x62=pz*pz;
IkReal x63=((250000.0)*pp);
IkReal x64=(pp*sj1);
IkReal x65=(sj1*x62);
IkReal x66=((135000.0)*cj1*pz);
j0eval[0]=(x64+(((-1.0)*x65)));
j0eval[1]=IKsign(((((-27.0)*x65))+(((27.0)*x64))));
j0eval[2]=((IKabs(((((-1.0)*px*x66))+(((-5801.0)*px))+((px*x63)))))+(IKabs(((((-5801.0)*py))+(((-1.0)*py*x66))+((py*x63))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x67=((151.0)*sj2);
IkReal x68=((35.0)*cj2);
IkReal x69=((500.0)*cj1*pz);
IkReal x70=(((pp*sj1))+(((-1.0)*sj1*(pz*pz))));
j0eval[0]=x70;
j0eval[1]=IKsign(x70);
j0eval[2]=((IKabs(((((-1.0)*px*x67))+(((-1.0)*px*x69))+((px*x68))+(((135.0)*px)))))+(IKabs(((((-1.0)*py*x69))+(((-1.0)*py*x67))+((py*x68))+(((135.0)*py))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x71=((1.0)*pp);
IkReal x72=((0.302)*sj2);
IkReal x73=((0.07)*cj2);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
evalcond[1]=((0.169004)+(((-1.0)*x71))+(((-0.16308)*sj2))+(((0.0378)*cj2)));
evalcond[2]=((0.023204)+(((-1.0)*x71))+(((0.54)*pz)));
evalcond[3]=((0.27)+(((-1.0)*x72))+(((-1.0)*pz))+x73);
evalcond[4]=((-0.27)+(((-1.0)*x73))+pz+x72);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj1=0;
cj1=1.0;
j1=0;
IkReal x74=((151.0)*cj2);
IkReal x75=((35.0)*sj2);
IkReal x76=((((-1.0)*pp))+(pz*pz));
j0eval[0]=x76;
j0eval[1]=((IKabs(((((-1.0)*px*x74))+(((-1.0)*px*x75)))))+(IKabs(((((-1.0)*py*x75))+(((-1.0)*py*x74))))));
j0eval[2]=IKsign(x76);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x77=((0.302)*cj2);
IkReal x78=((0.07)*sj2);
CheckValue<IkReal> x79=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp))+(pz*pz))),-1);
if(!x79.valid){
continue;
}
CheckValue<IkReal> x80 = IKatan2WithCheck(IkReal(((((-1.0)*py*x77))+(((-1.0)*py*x78)))),((((-1.0)*px*x77))+(((-1.0)*px*x78))),IKFAST_ATAN2_MAGTHRESH);
if(!x80.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x79.value)))+(x80.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x81=IKsin(j0);
IkReal x82=IKcos(j0);
evalcond[0]=((((-1.0)*py*x82))+((px*x81)));
evalcond[1]=((((-0.07)*sj2))+((py*x81))+((px*x82))+(((-0.302)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x391=((1.0)*pp);
IkReal x392=((0.27)+(((0.07)*cj2))+pz+(((-0.302)*sj2)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
evalcond[1]=((0.169004)+(((-1.0)*x391))+(((-0.16308)*sj2))+(((0.0378)*cj2)));
evalcond[2]=((0.023204)+(((-1.0)*x391))+(((-0.54)*pz)));
evalcond[3]=x392;
evalcond[4]=x392;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x393=((35.0)*sj2);
IkReal x394=((151.0)*cj2);
IkReal x395=(pp+(((-1.0)*(pz*pz))));
j0eval[0]=x395;
j0eval[1]=((IKabs(((((-1.0)*px*x394))+(((-1.0)*px*x393)))))+(IKabs(((((-1.0)*py*x394))+(((-1.0)*py*x393))))));
j0eval[2]=IKsign(x395);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x396=((0.302)*cj2);
IkReal x397=((0.07)*sj2);
CheckValue<IkReal> x398 = IKatan2WithCheck(IkReal(((((-1.0)*py*x396))+(((-1.0)*py*x397)))),((((-1.0)*px*x397))+(((-1.0)*px*x396))),IKFAST_ATAN2_MAGTHRESH);
if(!x398.valid){
continue;
}
CheckValue<IkReal> x399=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);
if(!x399.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x398.value)+(((1.5707963267949)*(x399.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x400=IKcos(j0);
IkReal x401=IKsin(j0);
IkReal x402=((1.0)*x400);
evalcond[0]=(((px*x401))+(((-1.0)*py*x402)));
evalcond[1]=((((-1.0)*py*x401))+(((-1.0)*px*x402))+(((-0.07)*sj2))+(((-0.302)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x403=((0.302)*cj2);
IkReal x404=((0.07)*sj2);
IkReal x405=(x403+x404);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((0.169004)+(((-0.16308)*sj2))+(((-1.0)*pp))+(((0.0378)*cj2)));
evalcond[2]=((((-1.0)*pz))+(((-1.0)*x405)));
evalcond[3]=(x405+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x406=pz*pz;
IkReal x407=((250000.0)*pp);
j0eval[0]=((((-1.0)*pp))+x406);
j0eval[1]=IKsign(((((27.0)*x406))+(((-27.0)*pp))));
j0eval[2]=((IKabs(((((-1.0)*px*x407))+(((5801.0)*px)))))+(IKabs(((((5801.0)*py))+(((-1.0)*py*x407))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x408=((17500.0)*pz);
IkReal x409=((24026.0)*sj2);
IkReal x410=(pp+(((-1.0)*(pz*pz))));
j0eval[0]=x410;
j0eval[1]=IKsign(x410);
j0eval[2]=((IKabs(((((20385.0)*py))+(((-1.0)*py*x408))+(((-1.0)*py*x409)))))+(IKabs(((((-1.0)*px*x409))+(((-1.0)*px*x408))+(((20385.0)*px))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x411=((0.231788079470199)*pz);
IkReal x412=((0.318225165562914)*sj2);
CheckValue<IkReal> x413=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);
if(!x413.valid){
continue;
}
CheckValue<IkReal> x414 = IKatan2WithCheck(IkReal(((((0.27)*py))+(((-1.0)*py*x411))+(((-1.0)*py*x412)))),((((-1.0)*px*x411))+(((-1.0)*px*x412))+(((0.27)*px))),IKFAST_ATAN2_MAGTHRESH);
if(!x414.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x413.value)))+(x414.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x415=IKcos(j0);
IkReal x416=IKsin(j0);
IkReal x417=((1.0)*py);
IkReal x418=(px*x415);
evalcond[0]=(((px*x416))+(((-1.0)*x415*x417)));
evalcond[1]=((0.023204)+(((0.54)*x418))+(((-1.0)*pp))+(((0.54)*py*x416)));
evalcond[2]=((0.27)+(((-1.0)*x416*x417))+(((-0.318225165562914)*sj2))+(((-0.231788079470199)*pz))+(((-1.0)*x418)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x419=((50.0)*pp);
CheckValue<IkReal> x420 = IKatan2WithCheck(IkReal(((((1.1602)*py))+(((-1.0)*py*x419)))),((((-1.0)*px*x419))+(((1.1602)*px))),IKFAST_ATAN2_MAGTHRESH);
if(!x420.valid){
continue;
}
CheckValue<IkReal> x421=IKPowWithIntegerCheck(IKsign(((((-27.0)*pp))+(((27.0)*(pz*pz))))),-1);
if(!x421.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x420.value)+(((1.5707963267949)*(x421.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x422=IKcos(j0);
IkReal x423=IKsin(j0);
IkReal x424=((1.0)*py);
IkReal x425=(px*x422);
evalcond[0]=((((-1.0)*x422*x424))+((px*x423)));
evalcond[1]=((0.023204)+(((0.54)*x425))+(((-1.0)*pp))+(((0.54)*py*x423)));
evalcond[2]=((0.27)+(((-1.0)*x425))+(((-0.318225165562914)*sj2))+(((-0.231788079470199)*pz))+(((-1.0)*x423*x424)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x426=((((-0.07)*sj2))+pz+(((-0.302)*cj2)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((0.169004)+(((-0.16308)*sj2))+(((-1.0)*pp))+(((0.0378)*cj2)));
evalcond[2]=x426;
evalcond[3]=x426;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x427=pz*pz;
IkReal x428=((250000.0)*pp);
j0eval[0]=((((-1.0)*x427))+pp);
j0eval[1]=((IKabs(((((5801.0)*py))+(((-1.0)*py*x428)))))+(IKabs(((((-1.0)*px*x428))+(((5801.0)*px))))));
j0eval[2]=IKsign(((((-27.0)*x427))+(((27.0)*pp))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x429=((24026.0)*sj2);
IkReal x430=((17500.0)*pz);
IkReal x431=((((-1.0)*pp))+(pz*pz));
j0eval[0]=x431;
j0eval[1]=((IKabs((((px*x430))+(((-1.0)*px*x429))+(((20385.0)*px)))))+(IKabs(((((20385.0)*py))+((py*x430))+(((-1.0)*py*x429))))));
j0eval[2]=IKsign(x431);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x432=((0.231788079470199)*pz);
IkReal x433=((0.318225165562914)*sj2);
CheckValue<IkReal> x434=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp))+(pz*pz))),-1);
if(!x434.valid){
continue;
}
CheckValue<IkReal> x435 = IKatan2WithCheck(IkReal(((((0.27)*py))+((py*x432))+(((-1.0)*py*x433)))),(((px*x432))+(((0.27)*px))+(((-1.0)*px*x433))),IKFAST_ATAN2_MAGTHRESH);
if(!x435.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x434.value)))+(x435.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x436=IKcos(j0);
IkReal x437=IKsin(j0);
IkReal x438=(px*x436);
IkReal x439=(py*x437);
evalcond[0]=(((px*x437))+(((-1.0)*py*x436)));
evalcond[1]=((0.023204)+(((-0.54)*x438))+(((-0.54)*x439))+(((-1.0)*pp)));
evalcond[2]=((0.27)+(((0.231788079470199)*pz))+x438+x439+(((-0.318225165562914)*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x440=((50.0)*pp);
CheckValue<IkReal> x441 = IKatan2WithCheck(IkReal(((((1.1602)*py))+(((-1.0)*py*x440)))),((((1.1602)*px))+(((-1.0)*px*x440))),IKFAST_ATAN2_MAGTHRESH);
if(!x441.valid){
continue;
}
CheckValue<IkReal> x442=IKPowWithIntegerCheck(IKsign(((((27.0)*pp))+(((-27.0)*(pz*pz))))),-1);
if(!x442.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x441.value)+(((1.5707963267949)*(x442.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x443=IKcos(j0);
IkReal x444=IKsin(j0);
IkReal x445=(px*x443);
IkReal x446=(py*x444);
evalcond[0]=(((px*x444))+(((-1.0)*py*x443)));
evalcond[1]=((0.023204)+(((-0.54)*x445))+(((-0.54)*x446))+(((-1.0)*pp)));
evalcond[2]=((0.27)+(((0.231788079470199)*pz))+x445+x446+(((-0.318225165562914)*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x447=((0.07)*cj2);
IkReal x448=((0.302)*sj2);
IkReal x449=((1.0)*cj1*pz);
CheckValue<IkReal> x450 = IKatan2WithCheck(IkReal(((((0.27)*py))+((py*x447))+(((-1.0)*py*x448))+(((-1.0)*py*x449)))),(((px*x447))+(((0.27)*px))+(((-1.0)*px*x449))+(((-1.0)*px*x448))),IKFAST_ATAN2_MAGTHRESH);
if(!x450.valid){
continue;
}
CheckValue<IkReal> x451=IKPowWithIntegerCheck(IKsign((((pp*sj1))+(((-1.0)*sj1*(pz*pz))))),-1);
if(!x451.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x450.value)+(((1.5707963267949)*(x451.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x452=IKcos(j0);
IkReal x453=IKsin(j0);
IkReal x454=(cj1*pz);
IkReal x455=((0.07)*cj2);
IkReal x456=((0.07)*sj2);
IkReal x457=((0.54)*sj1);
IkReal x458=((0.302)*cj2);
IkReal x459=((1.0)*sj1);
IkReal x460=((0.302)*sj2);
IkReal x461=(px*x452);
IkReal x462=(py*x453);
evalcond[0]=((((-1.0)*py*x452))+((px*x453)));
evalcond[1]=((0.023204)+(((0.54)*x454))+(((-1.0)*pp))+((x457*x461))+((x457*x462)));
evalcond[2]=(((cj1*x462))+((cj1*x461))+(((-1.0)*x458))+(((-1.0)*x456))+(((-1.0)*pz*x459)));
evalcond[3]=((0.27)+(((-1.0)*x454))+(((-1.0)*x459*x462))+(((-1.0)*x459*x461))+(((-1.0)*x460))+x455);
evalcond[4]=(((cj1*x458))+((cj1*x456))+(((-1.0)*x462))+(((-1.0)*x461))+(((0.27)*sj1))+(((-1.0)*sj1*x460))+((sj1*x455)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x463=((27.0)*sj1);
IkReal x464=((50.0)*pp);
IkReal x465=((27.0)*cj1*pz);
CheckValue<IkReal> x466=IKPowWithIntegerCheck(IKsign(((((-1.0)*x463*(pz*pz)))+((pp*x463)))),-1);
if(!x466.valid){
continue;
}
CheckValue<IkReal> x467 = IKatan2WithCheck(IkReal(((((-1.1602)*py))+(((-1.0)*py*x465))+((py*x464)))),((((-1.1602)*px))+((px*x464))+(((-1.0)*px*x465))),IKFAST_ATAN2_MAGTHRESH);
if(!x467.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x466.value)))+(x467.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x468=IKcos(j0);
IkReal x469=IKsin(j0);
IkReal x470=(cj1*pz);
IkReal x471=((0.07)*cj2);
IkReal x472=((0.07)*sj2);
IkReal x473=((0.54)*sj1);
IkReal x474=((0.302)*cj2);
IkReal x475=((1.0)*sj1);
IkReal x476=((0.302)*sj2);
IkReal x477=(px*x468);
IkReal x478=(py*x469);
evalcond[0]=((((-1.0)*py*x468))+((px*x469)));
evalcond[1]=((0.023204)+((x473*x478))+((x473*x477))+(((-1.0)*pp))+(((0.54)*x470)));
evalcond[2]=((((-1.0)*x474))+(((-1.0)*x472))+(((-1.0)*pz*x475))+((cj1*x478))+((cj1*x477)));
evalcond[3]=((0.27)+(((-1.0)*x475*x477))+(((-1.0)*x475*x478))+(((-1.0)*x476))+(((-1.0)*x470))+x471);
evalcond[4]=((((-1.0)*sj1*x476))+((cj1*x474))+((cj1*x472))+(((0.27)*sj1))+(((-1.0)*x477))+(((-1.0)*x478))+((sj1*x471)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x479=((0.302)*cj2);
IkReal x480=((0.07)*sj2);
IkReal x481=(pz*sj1);
CheckValue<IkReal> x482=IKPowWithIntegerCheck(IKsign((((cj1*pp))+(((-1.0)*cj1*(pz*pz))))),-1);
if(!x482.valid){
continue;
}
CheckValue<IkReal> x483 = IKatan2WithCheck(IkReal((((py*x481))+((py*x480))+((py*x479)))),(((px*x480))+((px*x481))+((px*x479))),IKFAST_ATAN2_MAGTHRESH);
if(!x483.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x482.value)))+(x483.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x484=IKcos(j0);
IkReal x485=IKsin(j0);
IkReal x486=(cj1*pz);
IkReal x487=((0.07)*cj2);
IkReal x488=((0.07)*sj2);
IkReal x489=((0.54)*sj1);
IkReal x490=((0.302)*cj2);
IkReal x491=((1.0)*sj1);
IkReal x492=((0.302)*sj2);
IkReal x493=(px*x484);
IkReal x494=(py*x485);
evalcond[0]=((((-1.0)*py*x484))+((px*x485)));
evalcond[1]=((0.023204)+((x489*x493))+((x489*x494))+(((0.54)*x486))+(((-1.0)*pp)));
evalcond[2]=((((-1.0)*x490))+(((-1.0)*x488))+((cj1*x493))+((cj1*x494))+(((-1.0)*pz*x491)));
evalcond[3]=((0.27)+(((-1.0)*x492))+(((-1.0)*x491*x494))+(((-1.0)*x491*x493))+(((-1.0)*x486))+x487);
evalcond[4]=((((-1.0)*sj1*x492))+(((0.27)*sj1))+((sj1*x487))+(((-1.0)*x494))+(((-1.0)*x493))+((cj1*x488))+((cj1*x490)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x496 = IKatan2WithCheck(IkReal(((-1.0)*py)),px,IKFAST_ATAN2_MAGTHRESH);
if(!x496.valid){
continue;
}
IkReal x495=x496.value;
j0array[0]=((-1.0)*x495);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x495)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal j1eval[3];
IkReal x497=cj2*cj2;
IkReal x498=(cj2*pz);
IkReal x499=(py*sj0);
IkReal x500=((4.31428571428571)*cj2);
IkReal x501=(cj0*px);
IkReal x502=(pz*sj2);
IkReal x503=((0.07)*sj2);
IkReal x504=((0.302)*cj2);
IkReal x505=(cj2*sj2);
IkReal x506=((1.0)*pz);
j1eval[0]=(((x500*x501))+((sj2*x501))+(((-3.85714285714286)*pz))+(((-1.0)*x498))+((sj2*x499))+((x499*x500))+(((4.31428571428571)*x502)));
j1eval[1]=IKsign(((((0.302)*x502))+((x501*x504))+((x501*x503))+(((-0.07)*x498))+(((-0.27)*pz))+((x499*x503))+((x499*x504))));
j1eval[2]=((IKabs(((0.0049)+(((-1.0)*pz*x506))+(((0.086304)*x497))+(((0.04228)*x505)))))+(IKabs(((-0.02114)+(((0.04228)*x497))+(((-1.0)*x499*x506))+(((-1.0)*x501*x506))+(((0.08154)*cj2))+(((-0.086304)*x505))+(((0.0189)*sj2))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
IkReal x507=(py*sj0);
IkReal x508=((8.154)*sj2);
IkReal x509=((1.89)*cj2);
IkReal x510=((1.0)*cj2);
IkReal x511=(pp*sj2);
IkReal x512=(cj0*px);
IkReal x513=((4.31428571428571)*sj2);
IkReal x514=(pz*sj2);
IkReal x515=((27.0)*pz);
IkReal x516=(cj2*pz);
IkReal x517=(cj2*pp);
j1eval[0]=(((x507*x513))+(((-1.0)*x514))+((x512*x513))+(((-3.85714285714286)*x507))+(((-1.0)*x510*x512))+(((-3.85714285714286)*x512))+(((-4.31428571428571)*x516))+(((-1.0)*x507*x510)));
j1eval[1]=((IKabs(((0.313254)+(((15.1)*x511))+((pz*x515))+(((-0.3503804)*sj2))+(((-3.5)*x517))+(((0.081214)*cj2))+(((-13.5)*pp)))))+(IKabs(((((0.3503804)*cj2))+(((-15.1)*x517))+(((-3.5)*x511))+(((-1.0)*x512*x515))+(((0.081214)*sj2))+(((-1.0)*x507*x515))))));
j1eval[2]=IKsign(((((-1.89)*x514))+((x507*x508))+(((-1.0)*x507*x509))+(((-7.29)*x512))+((x508*x512))+(((-7.29)*x507))+(((-1.0)*x509*x512))+(((-8.154)*x516))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
IkReal x518=cj0*cj0;
IkReal x519=py*py;
IkReal x520=px*px;
IkReal x521=pz*pz;
IkReal x522=((8.154)*cj2);
IkReal x523=(cj0*px);
IkReal x524=(py*sj0);
IkReal x525=((50.0)*pp);
IkReal x526=((1.89)*sj2);
IkReal x527=(x518*x520);
IkReal x528=(x518*x519);
j1eval[0]=((((-1.0)*x528))+(((2.0)*x523*x524))+x521+x527+x519);
j1eval[1]=((IKabs((((x522*x524))+((x522*x523))+((pz*x525))+(((-1.1602)*pz))+((x524*x526))+((x523*x526)))))+(IKabs(((((-1.1602)*x523))+(((-1.1602)*x524))+((x524*x525))+((x523*x525))+(((-1.0)*pz*x526))+(((-1.0)*pz*x522))))));
j1eval[2]=IKsign(((((27.0)*x527))+(((27.0)*x521))+(((27.0)*x519))+(((-27.0)*x528))+(((54.0)*x523*x524))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x529=cj0*cj0;
IkReal x530=py*py;
IkReal x531=((8.154)*cj2);
IkReal x532=(cj0*px);
IkReal x533=(py*sj0);
IkReal x534=((50.0)*pp);
IkReal x535=((1.89)*sj2);
IkReal x536=((27.0)*x529);
CheckValue<IkReal> x537=IKPowWithIntegerCheck(IKsign(((((27.0)*x530))+(((-1.0)*x530*x536))+((x536*(px*px)))+(((54.0)*x532*x533))+(((27.0)*(pz*pz))))),-1);
if(!x537.valid){
continue;
}
CheckValue<IkReal> x538 = IKatan2WithCheck(IkReal(((((-1.0)*pz*x535))+(((-1.0)*pz*x531))+((x532*x534))+((x533*x534))+(((-1.1602)*x533))+(((-1.1602)*x532)))),(((pz*x534))+(((-1.1602)*pz))+((x531*x533))+((x531*x532))+((x532*x535))+((x533*x535))),IKFAST_ATAN2_MAGTHRESH);
if(!x538.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x537.value)))+(x538.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x539=IKsin(j1);
IkReal x540=IKcos(j1);
IkReal x541=(cj0*px);
IkReal x542=((0.07)*cj2);
IkReal x543=(py*sj0);
IkReal x544=((0.302)*sj2);
IkReal x545=((0.07)*sj2);
IkReal x546=((0.302)*cj2);
IkReal x547=((1.0)*x539);
IkReal x548=(pz*x540);
IkReal x549=((0.54)*x539);
evalcond[0]=((0.023204)+((x541*x549))+(((0.54)*x548))+((x543*x549))+(((-1.0)*pp)));
evalcond[1]=(((x540*x543))+((x540*x541))+(((-1.0)*x546))+(((-1.0)*x545))+(((-1.0)*pz*x547)));
evalcond[2]=((0.27)+(((-1.0)*x541*x547))+(((-1.0)*x548))+(((-1.0)*x544))+x542+(((-1.0)*x543*x547)));
evalcond[3]=(((x539*x546))+((x539*x545))+(((-0.27)*x540))+((x540*x544))+(((-1.0)*x540*x542))+pz);
evalcond[4]=(((x539*x542))+(((-1.0)*x543))+(((-1.0)*x541))+(((-1.0)*x539*x544))+((x540*x545))+((x540*x546))+(((0.27)*x539)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x550=(py*sj0);
IkReal x551=((8.154)*sj2);
IkReal x552=((15.1)*pp);
IkReal x553=(cj0*px);
IkReal x554=((27.0)*pz);
IkReal x555=((1.89)*cj2);
IkReal x556=((3.5)*pp);
CheckValue<IkReal> x557 = IKatan2WithCheck(IkReal(((0.313254)+((pz*x554))+(((-1.0)*cj2*x556))+((sj2*x552))+(((-0.3503804)*sj2))+(((0.081214)*cj2))+(((-13.5)*pp)))),((((0.3503804)*cj2))+(((-1.0)*x550*x554))+(((-1.0)*cj2*x552))+(((-1.0)*x553*x554))+(((-1.0)*sj2*x556))+(((0.081214)*sj2))),IKFAST_ATAN2_MAGTHRESH);
if(!x557.valid){
continue;
}
CheckValue<IkReal> x558=IKPowWithIntegerCheck(IKsign(((((-8.154)*cj2*pz))+(((-1.0)*x550*x555))+(((-1.0)*x553*x555))+(((-1.89)*pz*sj2))+(((-7.29)*x550))+(((-7.29)*x553))+((x550*x551))+((x551*x553)))),-1);
if(!x558.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x557.value)+(((1.5707963267949)*(x558.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x559=IKsin(j1);
IkReal x560=IKcos(j1);
IkReal x561=(cj0*px);
IkReal x562=((0.07)*cj2);
IkReal x563=(py*sj0);
IkReal x564=((0.302)*sj2);
IkReal x565=((0.07)*sj2);
IkReal x566=((0.302)*cj2);
IkReal x567=((1.0)*x559);
IkReal x568=(pz*x560);
IkReal x569=((0.54)*x559);
evalcond[0]=((0.023204)+((x563*x569))+((x561*x569))+(((-1.0)*pp))+(((0.54)*x568)));
evalcond[1]=((((-1.0)*pz*x567))+((x560*x563))+((x560*x561))+(((-1.0)*x565))+(((-1.0)*x566)));
evalcond[2]=((0.27)+x562+(((-1.0)*x568))+(((-1.0)*x563*x567))+(((-1.0)*x561*x567))+(((-1.0)*x564)));
evalcond[3]=(((x560*x564))+pz+(((-1.0)*x560*x562))+(((-0.27)*x560))+((x559*x565))+((x559*x566)));
evalcond[4]=((((0.27)*x559))+((x560*x566))+((x560*x565))+(((-1.0)*x559*x564))+(((-1.0)*x563))+(((-1.0)*x561))+((x559*x562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x570=cj2*cj2;
IkReal x571=(cj0*px);
IkReal x572=((0.302)*cj2);
IkReal x573=(cj2*sj2);
IkReal x574=((0.07)*sj2);
IkReal x575=(py*sj0);
IkReal x576=((1.0)*pz);
CheckValue<IkReal> x577=IKPowWithIntegerCheck(IKsign((((x571*x574))+((x571*x572))+(((0.302)*pz*sj2))+((x574*x575))+(((-0.07)*cj2*pz))+(((-0.27)*pz))+((x572*x575)))),-1);
if(!x577.valid){
continue;
}
CheckValue<IkReal> x578 = IKatan2WithCheck(IkReal(((-0.02114)+(((-0.086304)*x573))+(((-1.0)*x571*x576))+(((0.08154)*cj2))+(((-1.0)*x575*x576))+(((0.0189)*sj2))+(((0.04228)*x570)))),((0.0049)+(((0.086304)*x570))+(((-1.0)*pz*x576))+(((0.04228)*x573))),IKFAST_ATAN2_MAGTHRESH);
if(!x578.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x577.value)))+(x578.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x579=IKsin(j1);
IkReal x580=IKcos(j1);
IkReal x581=(cj0*px);
IkReal x582=((0.07)*cj2);
IkReal x583=(py*sj0);
IkReal x584=((0.302)*sj2);
IkReal x585=((0.07)*sj2);
IkReal x586=((0.302)*cj2);
IkReal x587=((1.0)*x579);
IkReal x588=(pz*x580);
IkReal x589=((0.54)*x579);
evalcond[0]=((0.023204)+((x583*x589))+(((0.54)*x588))+((x581*x589))+(((-1.0)*pp)));
evalcond[1]=(((x580*x583))+((x580*x581))+(((-1.0)*pz*x587))+(((-1.0)*x586))+(((-1.0)*x585)));
evalcond[2]=((0.27)+(((-1.0)*x588))+(((-1.0)*x583*x587))+x582+(((-1.0)*x584))+(((-1.0)*x581*x587)));
evalcond[3]=((((-1.0)*x580*x582))+((x579*x586))+((x579*x585))+((x580*x584))+pz+(((-0.27)*x580)));
evalcond[4]=((((0.27)*x579))+(((-1.0)*x583))+(((-1.0)*x581))+((x579*x582))+((x580*x585))+((x580*x586))+(((-1.0)*x579*x584)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x83=(cj0*r00);
IkReal x84=(cj0*r01);
IkReal x85=(r12*sj0);
IkReal x86=((1.0)*sj1);
IkReal x87=((1.0)*sj0);
IkReal x88=(r11*sj0);
IkReal x89=(r10*sj0);
IkReal x90=(cj1*sj2);
IkReal x91=(cj0*r02);
IkReal x92=(((cj2*sj1))+x90);
IkReal x93=((((-1.0)*sj2*x86))+((cj1*cj2)));
IkReal x94=(cj0*x93);
IkReal x95=(sj0*x93);
IkReal x96=((((-1.0)*x90))+(((-1.0)*cj2*x86)));
new_r00=((((-1.0)*r00*x87))+((cj0*r10)));
new_r01=(((cj0*r11))+(((-1.0)*r01*x87)));
new_r02=((((-1.0)*r02*x87))+((cj0*r12)));
new_r10=(((x89*x92))+((r20*x93))+((x83*x92)));
new_r11=(((r21*x93))+((x88*x92))+((x84*x92)));
new_r12=(((x85*x92))+((r22*x93))+((x91*x92)));
new_r20=(((x89*x93))+((r20*x96))+((x83*x93)));
new_r21=(((r21*x96))+((x88*x93))+((x84*x93)));
new_r22=(((x85*x93))+((r22*x96))+((x91*x93)));
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
cj4array[0]=new_r22;
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal j5eval[2];
IkReal x97=(cj0*r00);
IkReal x98=(cj0*r01);
IkReal x99=(r12*sj0);
IkReal x100=((1.0)*sj1);
IkReal x101=((1.0)*sj0);
IkReal x102=(r11*sj0);
IkReal x103=(r10*sj0);
IkReal x104=(cj1*sj2);
IkReal x105=(cj0*r02);
IkReal x106=(((cj2*sj1))+x104);
IkReal x107=x93;
IkReal x108=(cj0*x107);
IkReal x109=(sj0*x107);
IkReal x110=x96;
new_r00=((((-1.0)*r00*x101))+((cj0*r10)));
new_r01=((((-1.0)*r01*x101))+((cj0*r11)));
new_r02=((((-1.0)*r02*x101))+((cj0*r12)));
new_r10=(((r20*x107))+((x103*x106))+((x106*x97)));
new_r11=(((r21*x107))+((x102*x106))+((x106*x98)));
new_r12=(((r22*x107))+((x106*x99))+((x105*x106)));
new_r20=(((x107*x97))+((x103*x107))+((r20*x110)));
new_r21=(((x107*x98))+((r21*x110))+((x102*x107)));
new_r22=(((r22*x110))+((x107*x99))+((x105*x107)));
j5eval[0]=sj4;
j5eval[1]=IKsign(sj4);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
IkReal x111=(cj0*r00);
IkReal x112=(cj0*r01);
IkReal x113=(r12*sj0);
IkReal x114=((1.0)*sj1);
IkReal x115=((1.0)*sj0);
IkReal x116=(r11*sj0);
IkReal x117=(r10*sj0);
IkReal x118=(cj1*sj2);
IkReal x119=(cj0*r02);
IkReal x120=(((cj2*sj1))+x118);
IkReal x121=x93;
IkReal x122=(cj0*x121);
IkReal x123=(sj0*x121);
IkReal x124=x96;
new_r00=((((-1.0)*r00*x115))+((cj0*r10)));
new_r01=((((-1.0)*r01*x115))+((cj0*r11)));
new_r02=((((-1.0)*r02*x115))+((cj0*r12)));
new_r10=(((x117*x120))+((x111*x120))+((r20*x121)));
new_r11=(((x112*x120))+((r21*x121))+((x116*x120)));
new_r12=(((r22*x121))+((x113*x120))+((x119*x120)));
new_r20=(((x117*x121))+((x111*x121))+((r20*x124)));
new_r21=(((x112*x121))+((r21*x124))+((x116*x121)));
new_r22=(((r22*x124))+((x113*x121))+((x119*x121)));
j3eval[0]=sj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r12;
evalcond[3]=new_r02;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x126 = IKatan2WithCheck(IkReal(new_r02),new_r12,IKFAST_ATAN2_MAGTHRESH);
if(!x126.valid){
continue;
}
IkReal x125=x126.value;
j3array[0]=((-1.0)*x125);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+(((-1.0)*x125)));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r02*(IKsin(j3))))+((new_r12*(IKcos(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x127=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj3*x127))+(((-1.0)*new_r00*sj3)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj3*x127))+((cj3*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj3*x127))+(((-1.0)*new_r00*sj3))))+IKsqr(((((-1.0)*sj3*x127))+((cj3*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*cj3*x127))+(((-1.0)*new_r00*sj3))), ((((-1.0)*sj3*x127))+((cj3*new_r00))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x128=IKsin(j5);
IkReal x129=IKcos(j5);
IkReal x130=((1.0)*sj3);
IkReal x131=(sj3*x128);
IkReal x132=((1.0)*x129);
IkReal x133=((1.0)*x128);
IkReal x134=(cj3*x132);
evalcond[0]=(((new_r11*sj3))+x128+((cj3*new_r01)));
evalcond[1]=(((new_r10*sj3))+(((-1.0)*x132))+((cj3*new_r00)));
evalcond[2]=(((cj3*x128))+((sj3*x129))+new_r01);
evalcond[3]=(x131+(((-1.0)*x134))+new_r00);
evalcond[4]=(x131+(((-1.0)*x134))+new_r11);
evalcond[5]=((((-1.0)*new_r00*x130))+(((-1.0)*x133))+((cj3*new_r10)));
evalcond[6]=((((-1.0)*new_r01*x130))+(((-1.0)*x132))+((cj3*new_r11)));
evalcond[7]=((((-1.0)*cj3*x133))+(((-1.0)*x129*x130))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r12;
evalcond[3]=new_r02;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x136 = IKatan2WithCheck(IkReal(new_r02),new_r12,IKFAST_ATAN2_MAGTHRESH);
if(!x136.valid){
continue;
}
IkReal x135=x136.value;
j3array[0]=((-1.0)*x135);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+(((-1.0)*x135)));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r02*(IKsin(j3))))+((new_r12*(IKcos(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x137=((1.0)*cj3);
if( IKabs(((((-1.0)*new_r01*x137))+(((-1.0)*new_r11*sj3)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r11*x137))+((new_r01*sj3)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r01*x137))+(((-1.0)*new_r11*sj3))))+IKsqr(((((-1.0)*new_r11*x137))+((new_r01*sj3))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*new_r01*x137))+(((-1.0)*new_r11*sj3))), ((((-1.0)*new_r11*x137))+((new_r01*sj3))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x138=IKsin(j5);
IkReal x139=IKcos(j5);
IkReal x140=((1.0)*sj3);
IkReal x141=(cj3*x138);
IkReal x142=((1.0)*x139);
IkReal x143=(x139*x140);
evalcond[0]=(((new_r11*sj3))+x138+((cj3*new_r01)));
evalcond[1]=(x138+((cj3*new_r10))+(((-1.0)*new_r00*x140)));
evalcond[2]=((((-1.0)*new_r01*x140))+x139+((cj3*new_r11)));
evalcond[3]=((((-1.0)*x142))+((new_r10*sj3))+((cj3*new_r00)));
evalcond[4]=(((cj3*x139))+((sj3*x138))+new_r11);
evalcond[5]=((((-1.0)*x143))+x141+new_r01);
evalcond[6]=((((-1.0)*x143))+x141+new_r10);
evalcond[7]=((((-1.0)*x138*x140))+(((-1.0)*cj3*x142))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x145=IKPowWithIntegerCheck(sj4,-1);
if(!x145.valid){
continue;
}
IkReal x144=x145.value;
CheckValue<IkReal> x146=IKPowWithIntegerCheck(new_r02,-1);
if(!x146.valid){
continue;
}
if( IKabs((x144*(x146.value)*(((1.0)+(((-1.0)*(cj4*cj4)))+(((-1.0)*(new_r12*new_r12))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r12*x144)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x144*(x146.value)*(((1.0)+(((-1.0)*(cj4*cj4)))+(((-1.0)*(new_r12*new_r12)))))))+IKsqr(((-1.0)*new_r12*x144))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x144*(x146.value)*(((1.0)+(((-1.0)*(cj4*cj4)))+(((-1.0)*(new_r12*new_r12)))))), ((-1.0)*new_r12*x144));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x147=IKsin(j3);
IkReal x148=IKcos(j3);
IkReal x149=((1.0)*cj4);
IkReal x150=((1.0)*sj4);
IkReal x151=(new_r02*x147);
IkReal x152=(new_r12*x148);
IkReal x153=(sj4*x148);
evalcond[0]=(x153+new_r12);
evalcond[1]=((((-1.0)*x147*x150))+new_r02);
evalcond[2]=(((new_r12*x147))+((new_r02*x148)));
evalcond[3]=(sj4+x152+(((-1.0)*x151)));
evalcond[4]=(((cj4*x152))+((new_r22*sj4))+(((-1.0)*x149*x151)));
evalcond[5]=((((-1.0)*new_r00*x147*x150))+(((-1.0)*new_r20*x149))+((new_r10*x153)));
evalcond[6]=((((-1.0)*new_r21*x149))+((new_r11*x153))+(((-1.0)*new_r01*x147*x150)));
evalcond[7]=((1.0)+((sj4*x152))+(((-1.0)*new_r22*x149))+(((-1.0)*x150*x151)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[2];
IkReal x154=(cj0*r00);
IkReal x155=(cj0*r01);
IkReal x156=(r12*sj0);
IkReal x157=((1.0)*sj1);
IkReal x158=((1.0)*sj0);
IkReal x159=(r11*sj0);
IkReal x160=(r10*sj0);
IkReal x161=(cj1*sj2);
IkReal x162=(cj0*r02);
IkReal x163=(((cj2*sj1))+x161);
IkReal x164=x93;
IkReal x165=(cj0*x164);
IkReal x166=(sj0*x164);
IkReal x167=x96;
new_r00=((((-1.0)*r00*x158))+((cj0*r10)));
new_r01=((((-1.0)*r01*x158))+((cj0*r11)));
new_r02=((((-1.0)*r02*x158))+((cj0*r12)));
new_r10=(((r20*x164))+((x154*x163))+((x160*x163)));
new_r11=(((r21*x164))+((x155*x163))+((x159*x163)));
new_r12=(((r22*x164))+((x162*x163))+((x156*x163)));
new_r20=(((r20*x167))+((x154*x164))+((x160*x164)));
new_r21=(((r21*x167))+((x155*x164))+((x159*x164)));
new_r22=(((r22*x167))+((x162*x164))+((x156*x164)));
j5eval[0]=sj4;
j5eval[1]=IKsign(sj4);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x168=(cj0*r00);
IkReal x169=(cj0*r01);
IkReal x170=(r12*sj0);
IkReal x171=((1.0)*sj1);
IkReal x172=((1.0)*sj0);
IkReal x173=(r11*sj0);
IkReal x174=(r10*sj0);
IkReal x175=(cj1*sj2);
IkReal x176=(cj0*r02);
IkReal x177=(((cj2*sj1))+x175);
IkReal x178=x93;
IkReal x179=(cj0*x178);
IkReal x180=(sj0*x178);
IkReal x181=x96;
new_r00=((((-1.0)*r00*x172))+((cj0*r10)));
new_r01=((((-1.0)*r01*x172))+((cj0*r11)));
new_r02=((((-1.0)*r02*x172))+((cj0*r12)));
new_r10=(((x168*x177))+((r20*x178))+((x174*x177)));
new_r11=(((x169*x177))+((x173*x177))+((r21*x178)));
new_r12=(((r22*x178))+((x176*x177))+((x170*x177)));
new_r20=(((x168*x178))+((r20*x181))+((x174*x178)));
new_r21=(((x169*x178))+((x173*x178))+((r21*x181)));
new_r22=(((x176*x178))+((x170*x178))+((r22*x181)));
j5eval[0]=sj4;
j5eval[1]=cj3;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
IkReal x182=(cj0*r00);
IkReal x183=(cj0*r01);
IkReal x184=(r12*sj0);
IkReal x185=((1.0)*sj1);
IkReal x186=((1.0)*sj0);
IkReal x187=(r11*sj0);
IkReal x188=(r10*sj0);
IkReal x189=(cj1*sj2);
IkReal x190=(cj0*r02);
IkReal x191=(((cj2*sj1))+x189);
IkReal x192=x93;
IkReal x193=(cj0*x192);
IkReal x194=(sj0*x192);
IkReal x195=x96;
new_r00=((((-1.0)*r00*x186))+((cj0*r10)));
new_r01=((((-1.0)*r01*x186))+((cj0*r11)));
new_r02=((((-1.0)*r02*x186))+((cj0*r12)));
new_r10=(((x188*x191))+((r20*x192))+((x182*x191)));
new_r11=(((x187*x191))+((r21*x192))+((x183*x191)));
new_r12=(((x184*x191))+((x190*x191))+((r22*x192)));
new_r20=(((x188*x192))+((r20*x195))+((x182*x192)));
new_r21=(((x187*x192))+((r21*x195))+((x183*x192)));
new_r22=(((x184*x192))+((x190*x192))+((r22*x195)));
j5eval[0]=sj4;
j5eval[1]=cj4;
j5eval[2]=sj3;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[12];
bool bgotonextstatement = true;
do
{
IkReal x196=(((new_r12*sj3))+((cj3*new_r02)));
IkReal x197=((((-1.0)*new_r02*sj3))+((cj3*new_r12)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r12;
evalcond[3]=new_r02;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=x196;
evalcond[7]=x196;
evalcond[8]=x197;
evalcond[9]=x197;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x198=((1.0)*new_r01);
if( IKabs(((((-1.0)*new_r00*sj3))+(((-1.0)*cj3*x198)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj3*x198))+((cj3*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*sj3))+(((-1.0)*cj3*x198))))+IKsqr(((((-1.0)*sj3*x198))+((cj3*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*new_r00*sj3))+(((-1.0)*cj3*x198))), ((((-1.0)*sj3*x198))+((cj3*new_r00))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x199=IKsin(j5);
IkReal x200=IKcos(j5);
IkReal x201=((1.0)*sj3);
IkReal x202=(sj3*x199);
IkReal x203=((1.0)*x200);
IkReal x204=((1.0)*x199);
IkReal x205=(cj3*x203);
evalcond[0]=(((new_r11*sj3))+x199+((cj3*new_r01)));
evalcond[1]=(((new_r10*sj3))+(((-1.0)*x203))+((cj3*new_r00)));
evalcond[2]=(((sj3*x200))+((cj3*x199))+new_r01);
evalcond[3]=((((-1.0)*x205))+x202+new_r00);
evalcond[4]=((((-1.0)*x205))+x202+new_r11);
evalcond[5]=((((-1.0)*new_r00*x201))+(((-1.0)*x204))+((cj3*new_r10)));
evalcond[6]=((((-1.0)*x203))+((cj3*new_r11))+(((-1.0)*new_r01*x201)));
evalcond[7]=((((-1.0)*x200*x201))+new_r10+(((-1.0)*cj3*x204)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x206=(cj3*new_r12);
IkReal x207=(new_r02*sj3);
IkReal x208=(((new_r12*sj3))+((cj3*new_r02)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r12;
evalcond[3]=new_r02;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=x208;
evalcond[7]=x208;
evalcond[8]=(x206+(((-1.0)*x207)));
evalcond[9]=(x207+(((-1.0)*x206)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x209=((1.0)*cj3);
if( IKabs(((((-1.0)*new_r11*sj3))+(((-1.0)*new_r01*x209)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r01*sj3))+(((-1.0)*new_r11*x209)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r11*sj3))+(((-1.0)*new_r01*x209))))+IKsqr((((new_r01*sj3))+(((-1.0)*new_r11*x209))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*new_r11*sj3))+(((-1.0)*new_r01*x209))), (((new_r01*sj3))+(((-1.0)*new_r11*x209))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x210=IKsin(j5);
IkReal x211=IKcos(j5);
IkReal x212=((1.0)*sj3);
IkReal x213=(cj3*x210);
IkReal x214=((1.0)*x211);
IkReal x215=(x211*x212);
evalcond[0]=(((new_r11*sj3))+x210+((cj3*new_r01)));
evalcond[1]=(x210+((cj3*new_r10))+(((-1.0)*new_r00*x212)));
evalcond[2]=(x211+(((-1.0)*new_r01*x212))+((cj3*new_r11)));
evalcond[3]=(((new_r10*sj3))+((cj3*new_r00))+(((-1.0)*x214)));
evalcond[4]=(((sj3*x210))+((cj3*x211))+new_r11);
evalcond[5]=(x213+new_r01+(((-1.0)*x215)));
evalcond[6]=(x213+new_r10+(((-1.0)*x215)));
evalcond[7]=((((-1.0)*cj3*x214))+(((-1.0)*x210*x212))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x216=((1.0)*sj3);
IkReal x217=(((new_r12*sj3))+((cj3*new_r02)));
IkReal x218=(((cj3*new_r10))+(((-1.0)*new_r00*x216)));
IkReal x219=((((-1.0)*new_r01*x216))+((cj3*new_r11)));
IkReal x220=((1.0)+(((-1.0)*new_r02*x216))+((cj3*new_r12)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=(cj3+new_r12);
evalcond[3]=(new_r02+(((-1.0)*x216)));
evalcond[4]=x217;
evalcond[5]=x217;
evalcond[6]=x220;
evalcond[7]=x218;
evalcond[8]=x219;
evalcond[9]=x218;
evalcond[10]=x219;
evalcond[11]=x220;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r20, new_r21);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x221=IKcos(j5);
IkReal x222=IKsin(j5);
IkReal x223=((1.0)*new_r12);
IkReal x224=((1.0)*x221);
IkReal x225=((1.0)*x222);
evalcond[0]=(new_r20+(((-1.0)*x225)));
evalcond[1]=(new_r21+(((-1.0)*x224)));
evalcond[2]=(((new_r12*x221))+new_r00);
evalcond[3]=(((new_r02*x222))+new_r11);
evalcond[4]=((((-1.0)*x222*x223))+new_r01);
evalcond[5]=(new_r10+(((-1.0)*new_r02*x224)));
evalcond[6]=((((-1.0)*new_r01*x223))+x222+((new_r02*new_r11)));
evalcond[7]=(((new_r02*new_r10))+(((-1.0)*x224))+(((-1.0)*new_r00*x223)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x226=(cj3*new_r12);
IkReal x227=(new_r01*sj3);
IkReal x228=((1.0)*cj3);
IkReal x229=(new_r00*sj3);
IkReal x230=(new_r02*sj3);
IkReal x231=(((new_r12*sj3))+((cj3*new_r02)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=(new_r12+(((-1.0)*x228)));
evalcond[3]=(sj3+new_r02);
evalcond[4]=x231;
evalcond[5]=x231;
evalcond[6]=((-1.0)+x226+(((-1.0)*x230)));
evalcond[7]=(((cj3*new_r10))+(((-1.0)*x229)));
evalcond[8]=(((cj3*new_r11))+(((-1.0)*x227)));
evalcond[9]=((((-1.0)*new_r10*x228))+x229);
evalcond[10]=((((-1.0)*new_r11*x228))+x227);
evalcond[11]=((1.0)+x230+(((-1.0)*x226)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20))+IKsqr(((-1.0)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*new_r20), ((-1.0)*new_r21));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x232=IKsin(j5);
IkReal x233=IKcos(j5);
IkReal x234=((1.0)*new_r02);
IkReal x235=((1.0)*x233);
evalcond[0]=(x232+new_r20);
evalcond[1]=(x233+new_r21);
evalcond[2]=(((new_r12*x232))+new_r01);
evalcond[3]=(((new_r02*x233))+new_r10);
evalcond[4]=((((-1.0)*new_r12*x235))+new_r00);
evalcond[5]=(new_r11+(((-1.0)*x232*x234)));
evalcond[6]=(((new_r01*new_r12))+x232+(((-1.0)*new_r11*x234)));
evalcond[7]=(((new_r00*new_r12))+(((-1.0)*x235))+(((-1.0)*new_r10*x234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x236=(new_r22+(((-1.0)*cj4)));
IkReal x237=(sj4+new_r12);
IkReal x238=((1.0)*cj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=x236;
evalcond[2]=x236;
evalcond[3]=x237;
evalcond[4]=new_r02;
evalcond[5]=x237;
evalcond[6]=(((cj4*new_r12))+((new_r22*sj4)));
evalcond[7]=(((new_r10*sj4))+(((-1.0)*new_r20*x238)));
evalcond[8]=((((-1.0)*new_r21*x238))+((new_r11*sj4)));
evalcond[9]=((1.0)+(((-1.0)*new_r22*x238))+((new_r12*sj4)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*new_r01), new_r00);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x239=IKsin(j5);
IkReal x240=IKcos(j5);
IkReal x241=((1.0)*new_r12);
IkReal x242=((1.0)*x240);
IkReal x243=((1.0)*x239);
evalcond[0]=(x239+new_r01);
evalcond[1]=(((new_r12*x239))+new_r20);
evalcond[2]=(((new_r12*x240))+new_r21);
evalcond[3]=((((-1.0)*x242))+new_r00);
evalcond[4]=((((-1.0)*new_r22*x242))+new_r11);
evalcond[5]=((((-1.0)*new_r22*x243))+new_r10);
evalcond[6]=((((-1.0)*new_r20*x241))+((new_r10*new_r22))+(((-1.0)*x243)));
evalcond[7]=((((-1.0)*new_r21*x241))+((new_r11*new_r22))+(((-1.0)*x242)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x244=(new_r22+(((-1.0)*cj4)));
IkReal x245=((1.0)*cj4);
IkReal x246=((1.0)*new_r12);
IkReal x247=((1.0)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=x244;
evalcond[2]=x244;
evalcond[3]=((((-1.0)*x247))+new_r12);
evalcond[4]=new_r02;
evalcond[5]=(sj4+(((-1.0)*x246)));
evalcond[6]=(((new_r22*sj4))+(((-1.0)*new_r12*x245)));
evalcond[7]=((((-1.0)*new_r20*x245))+(((-1.0)*new_r10*x247)));
evalcond[8]=((((-1.0)*new_r21*x245))+(((-1.0)*new_r11*x247)));
evalcond[9]=((1.0)+(((-1.0)*sj4*x246))+(((-1.0)*new_r22*x245)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r01, ((-1.0)*new_r00));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x248=IKsin(j5);
IkReal x249=IKcos(j5);
IkReal x250=((1.0)*new_r10);
IkReal x251=((1.0)*x249);
IkReal x252=((1.0)*x248);
evalcond[0]=(x248+(((-1.0)*new_r01)));
evalcond[1]=(((new_r22*x249))+new_r11);
evalcond[2]=(new_r20+(((-1.0)*new_r12*x252)));
evalcond[3]=(new_r21+(((-1.0)*new_r12*x251)));
evalcond[4]=((((-1.0)*new_r00))+(((-1.0)*x251)));
evalcond[5]=((((-1.0)*new_r22*x252))+(((-1.0)*x250)));
evalcond[6]=(((new_r12*new_r20))+(((-1.0)*new_r22*x250))+(((-1.0)*x252)));
evalcond[7]=((((-1.0)*new_r11*new_r22))+((new_r12*new_r21))+(((-1.0)*x251)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x253=(new_r22+(((-1.0)*cj4)));
IkReal x254=((1.0)*cj4);
IkReal x255=((1.0)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=x253;
evalcond[2]=x253;
evalcond[3]=new_r12;
evalcond[4]=(new_r02+(((-1.0)*x255)));
evalcond[5]=(sj4+(((-1.0)*new_r02)));
evalcond[6]=(((new_r22*sj4))+(((-1.0)*new_r02*x254)));
evalcond[7]=((((-1.0)*new_r20*x254))+(((-1.0)*new_r00*x255)));
evalcond[8]=((((-1.0)*new_r21*x254))+(((-1.0)*new_r01*x255)));
evalcond[9]=((1.0)+(((-1.0)*new_r22*x254))+(((-1.0)*new_r02*x255)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x256=IKcos(j5);
IkReal x257=IKsin(j5);
IkReal x258=((1.0)*new_r22);
IkReal x259=((1.0)*x256);
IkReal x260=((1.0)*x257);
evalcond[0]=(x257+new_r11);
evalcond[1]=(new_r10+(((-1.0)*x259)));
evalcond[2]=(((new_r22*x256))+new_r01);
evalcond[3]=(((new_r22*x257))+new_r00);
evalcond[4]=(new_r20+(((-1.0)*new_r02*x260)));
evalcond[5]=(new_r21+(((-1.0)*new_r02*x259)));
evalcond[6]=(((new_r02*new_r20))+(((-1.0)*x260))+(((-1.0)*new_r00*x258)));
evalcond[7]=((((-1.0)*new_r01*x258))+((new_r02*new_r21))+(((-1.0)*x259)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x261=(new_r22+(((-1.0)*cj4)));
IkReal x262=(sj4+new_r02);
IkReal x263=((1.0)*cj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=x261;
evalcond[2]=x261;
evalcond[3]=new_r12;
evalcond[4]=x262;
evalcond[5]=x262;
evalcond[6]=(((cj4*new_r02))+((new_r22*sj4)));
evalcond[7]=(((new_r00*sj4))+(((-1.0)*new_r20*x263)));
evalcond[8]=(((new_r01*sj4))+(((-1.0)*new_r21*x263)));
evalcond[9]=((1.0)+((new_r02*sj4))+(((-1.0)*new_r22*x263)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x264=IKPowWithIntegerCheck(IKsign(new_r02),-1);
if(!x264.valid){
continue;
}
CheckValue<IkReal> x265 = IKatan2WithCheck(IkReal(((-1.0)*new_r20)),((-1.0)*new_r21),IKFAST_ATAN2_MAGTHRESH);
if(!x265.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x264.value)))+(x265.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x266=IKsin(j5);
IkReal x267=IKcos(j5);
IkReal x268=((1.0)*new_r02);
IkReal x269=((1.0)*x267);
IkReal x270=((1.0)*x266);
evalcond[0]=(new_r20+((new_r02*x266)));
evalcond[1]=(new_r21+((new_r02*x267)));
evalcond[2]=(x266+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*new_r22*x269))+new_r01);
evalcond[4]=((((-1.0)*new_r22*x270))+new_r00);
evalcond[5]=((((-1.0)*new_r10))+(((-1.0)*x269)));
evalcond[6]=(((new_r00*new_r22))+(((-1.0)*new_r20*x268))+(((-1.0)*x270)));
evalcond[7]=(((new_r01*new_r22))+(((-1.0)*new_r21*x268))+(((-1.0)*x269)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x272=IKPowWithIntegerCheck(sj4,-1);
if(!x272.valid){
continue;
}
IkReal x271=x272.value;
CheckValue<IkReal> x273=IKPowWithIntegerCheck(cj4,-1);
if(!x273.valid){
continue;
}
CheckValue<IkReal> x274=IKPowWithIntegerCheck(sj3,-1);
if(!x274.valid){
continue;
}
if( IKabs((new_r20*x271)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x271*(x273.value)*(x274.value)*(((((-1.0)*new_r01*sj4))+(((-1.0)*cj3*new_r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r20*x271))+IKsqr((x271*(x273.value)*(x274.value)*(((((-1.0)*new_r01*sj4))+(((-1.0)*cj3*new_r20))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((new_r20*x271), (x271*(x273.value)*(x274.value)*(((((-1.0)*new_r01*sj4))+(((-1.0)*cj3*new_r20))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x275=IKsin(j5);
IkReal x276=IKcos(j5);
IkReal x277=(cj4*sj3);
IkReal x278=(cj3*new_r10);
IkReal x279=((1.0)*new_r01);
IkReal x280=(cj3*new_r11);
IkReal x281=((1.0)*new_r00);
IkReal x282=((1.0)*x276);
IkReal x283=(cj4*x275);
IkReal x284=((1.0)*x275);
evalcond[0]=((((-1.0)*sj4*x284))+new_r20);
evalcond[1]=((((-1.0)*sj4*x282))+new_r21);
evalcond[2]=(((new_r11*sj3))+x275+((cj3*new_r01)));
evalcond[3]=(((new_r10*sj3))+((cj3*new_r00))+(((-1.0)*x282)));
evalcond[4]=(new_r01+((x276*x277))+((cj3*x275)));
evalcond[5]=(((x275*x277))+(((-1.0)*cj3*x282))+new_r00);
evalcond[6]=((((-1.0)*cj3*cj4*x282))+((sj3*x275))+new_r11);
evalcond[7]=((((-1.0)*sj3*x281))+x278+(((-1.0)*x283)));
evalcond[8]=((((-1.0)*sj3*x279))+x280+(((-1.0)*cj4*x282)));
evalcond[9]=((((-1.0)*sj3*x282))+(((-1.0)*cj3*x283))+new_r10);
evalcond[10]=((((-1.0)*x277*x281))+((new_r20*sj4))+((cj4*x278))+(((-1.0)*x284)));
evalcond[11]=((((-1.0)*x277*x279))+(((-1.0)*x282))+((new_r21*sj4))+((cj4*x280)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x286=IKPowWithIntegerCheck(sj4,-1);
if(!x286.valid){
continue;
}
IkReal x285=x286.value;
CheckValue<IkReal> x287=IKPowWithIntegerCheck(cj3,-1);
if(!x287.valid){
continue;
}
if( IKabs((new_r20*x285)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x285*(x287.value)*((((new_r00*sj4))+((cj4*new_r20*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r20*x285))+IKsqr((x285*(x287.value)*((((new_r00*sj4))+((cj4*new_r20*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((new_r20*x285), (x285*(x287.value)*((((new_r00*sj4))+((cj4*new_r20*sj3))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x288=IKsin(j5);
IkReal x289=IKcos(j5);
IkReal x290=(cj4*sj3);
IkReal x291=(cj3*new_r10);
IkReal x292=((1.0)*new_r01);
IkReal x293=(cj3*new_r11);
IkReal x294=((1.0)*new_r00);
IkReal x295=((1.0)*x289);
IkReal x296=(cj4*x288);
IkReal x297=((1.0)*x288);
evalcond[0]=(new_r20+(((-1.0)*sj4*x297)));
evalcond[1]=(new_r21+(((-1.0)*sj4*x295)));
evalcond[2]=(((new_r11*sj3))+x288+((cj3*new_r01)));
evalcond[3]=(((new_r10*sj3))+(((-1.0)*x295))+((cj3*new_r00)));
evalcond[4]=(((x289*x290))+((cj3*x288))+new_r01);
evalcond[5]=((((-1.0)*cj3*x295))+new_r00+((x288*x290)));
evalcond[6]=(((sj3*x288))+(((-1.0)*cj3*cj4*x295))+new_r11);
evalcond[7]=((((-1.0)*x296))+x291+(((-1.0)*sj3*x294)));
evalcond[8]=((((-1.0)*cj4*x295))+x293+(((-1.0)*sj3*x292)));
evalcond[9]=((((-1.0)*cj3*x296))+(((-1.0)*sj3*x295))+new_r10);
evalcond[10]=((((-1.0)*x290*x294))+((new_r20*sj4))+(((-1.0)*x297))+((cj4*x291)));
evalcond[11]=((((-1.0)*x290*x292))+(((-1.0)*x295))+((cj4*x293))+((new_r21*sj4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x298=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x298.valid){
continue;
}
CheckValue<IkReal> x299 = IKatan2WithCheck(IkReal(new_r20),new_r21,IKFAST_ATAN2_MAGTHRESH);
if(!x299.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x298.value)))+(x299.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x300=IKsin(j5);
IkReal x301=IKcos(j5);
IkReal x302=(cj4*sj3);
IkReal x303=(cj3*new_r10);
IkReal x304=((1.0)*new_r01);
IkReal x305=(cj3*new_r11);
IkReal x306=((1.0)*new_r00);
IkReal x307=((1.0)*x301);
IkReal x308=(cj4*x300);
IkReal x309=((1.0)*x300);
evalcond[0]=((((-1.0)*sj4*x309))+new_r20);
evalcond[1]=((((-1.0)*sj4*x307))+new_r21);
evalcond[2]=(((new_r11*sj3))+x300+((cj3*new_r01)));
evalcond[3]=(((new_r10*sj3))+((cj3*new_r00))+(((-1.0)*x307)));
evalcond[4]=(((x301*x302))+((cj3*x300))+new_r01);
evalcond[5]=((((-1.0)*cj3*x307))+new_r00+((x300*x302)));
evalcond[6]=(((sj3*x300))+new_r11+(((-1.0)*cj3*cj4*x307)));
evalcond[7]=((((-1.0)*sj3*x306))+(((-1.0)*x308))+x303);
evalcond[8]=((((-1.0)*sj3*x304))+(((-1.0)*cj4*x307))+x305);
evalcond[9]=((((-1.0)*sj3*x307))+(((-1.0)*cj3*x308))+new_r10);
evalcond[10]=(((new_r20*sj4))+(((-1.0)*x302*x306))+((cj4*x303))+(((-1.0)*x309)));
evalcond[11]=((((-1.0)*x302*x304))+((new_r21*sj4))+((cj4*x305))+(((-1.0)*x307)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x310=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x310.valid){
continue;
}
CheckValue<IkReal> x311 = IKatan2WithCheck(IkReal(new_r20),new_r21,IKFAST_ATAN2_MAGTHRESH);
if(!x311.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x310.value)))+(x311.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x312=((1.0)*sj4);
evalcond[0]=((((-1.0)*x312*(IKsin(j5))))+new_r20);
evalcond[1]=((((-1.0)*x312*(IKcos(j5))))+new_r21);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[2];
IkReal x313=(cj0*r00);
IkReal x314=(cj0*r01);
IkReal x315=(r12*sj0);
IkReal x316=((1.0)*sj1);
IkReal x317=((1.0)*sj0);
IkReal x318=(r11*sj0);
IkReal x319=(r10*sj0);
IkReal x320=(cj1*sj2);
IkReal x321=(cj0*r02);
IkReal x322=(((cj2*sj1))+x320);
IkReal x323=x93;
IkReal x324=(cj0*x323);
IkReal x325=(sj0*x323);
IkReal x326=x96;
new_r00=((((-1.0)*r00*x317))+((cj0*r10)));
new_r01=((((-1.0)*r01*x317))+((cj0*r11)));
new_r02=((((-1.0)*r02*x317))+((cj0*r12)));
new_r10=(((r20*x323))+((x313*x322))+((x319*x322)));
new_r11=(((x318*x322))+((r21*x323))+((x314*x322)));
new_r12=(((r22*x323))+((x315*x322))+((x321*x322)));
new_r20=(((r20*x326))+((x313*x323))+((x319*x323)));
new_r21=(((x318*x323))+((r21*x326))+((x314*x323)));
new_r22=(((r22*x326))+((x315*x323))+((x321*x323)));
j3eval[0]=sj4;
j3eval[1]=IKsign(sj4);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
IkReal x327=(cj0*r00);
IkReal x328=(cj0*r01);
IkReal x329=(r12*sj0);
IkReal x330=((1.0)*sj1);
IkReal x331=((1.0)*sj0);
IkReal x332=(r11*sj0);
IkReal x333=(r10*sj0);
IkReal x334=(cj1*sj2);
IkReal x335=(cj0*r02);
IkReal x336=(((cj2*sj1))+x334);
IkReal x337=x93;
IkReal x338=(cj0*x337);
IkReal x339=(sj0*x337);
IkReal x340=x96;
new_r00=((((-1.0)*r00*x331))+((cj0*r10)));
new_r01=((((-1.0)*r01*x331))+((cj0*r11)));
new_r02=((((-1.0)*r02*x331))+((cj0*r12)));
new_r10=(((r20*x337))+((x327*x336))+((x333*x336)));
new_r11=(((r21*x337))+((x332*x336))+((x328*x336)));
new_r12=(((r22*x337))+((x335*x336))+((x329*x336)));
new_r20=(((x327*x337))+((x333*x337))+((r20*x340)));
new_r21=(((r21*x340))+((x332*x337))+((x328*x337)));
new_r22=(((x335*x337))+((r22*x340))+((x329*x337)));
j3eval[0]=sj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r12;
evalcond[3]=new_r02;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x341=IKPowWithIntegerCheck(IKsign((((new_r01*new_r12))+(((-1.0)*new_r02*new_r11)))),-1);
if(!x341.valid){
continue;
}
CheckValue<IkReal> x342 = IKatan2WithCheck(IkReal((new_r02*sj5)),((-1.0)*new_r12*sj5),IKFAST_ATAN2_MAGTHRESH);
if(!x342.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x341.value)))+(x342.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[10];
IkReal x343=IKcos(j3);
IkReal x344=IKsin(j3);
IkReal x345=((1.0)*cj5);
IkReal x346=(sj5*x344);
IkReal x347=(cj5*x344);
IkReal x348=(sj5*x343);
IkReal x349=((1.0)*x344);
IkReal x350=(x343*x345);
evalcond[0]=(((new_r02*x343))+((new_r12*x344)));
evalcond[1]=(sj5+((new_r11*x344))+((new_r01*x343)));
evalcond[2]=((((-1.0)*new_r02*x349))+((new_r12*x343)));
evalcond[3]=(x347+x348+new_r01);
evalcond[4]=((((-1.0)*x350))+x346+new_r00);
evalcond[5]=((((-1.0)*x350))+x346+new_r11);
evalcond[6]=(((new_r00*x343))+((new_r10*x344))+(((-1.0)*x345)));
evalcond[7]=((((-1.0)*x344*x345))+new_r10+(((-1.0)*x348)));
evalcond[8]=((((-1.0)*sj5))+((new_r10*x343))+(((-1.0)*new_r00*x349)));
evalcond[9]=(((new_r11*x343))+(((-1.0)*new_r01*x349))+(((-1.0)*x345)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r12;
evalcond[3]=new_r02;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x351 = IKatan2WithCheck(IkReal((new_r01*new_r02)),((-1.0)*new_r01*new_r12),IKFAST_ATAN2_MAGTHRESH);
if(!x351.valid){
continue;
}
CheckValue<IkReal> x352=IKPowWithIntegerCheck(IKsign((((new_r12*sj5))+((cj5*new_r02)))),-1);
if(!x352.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x351.value)+(((1.5707963267949)*(x352.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[10];
IkReal x353=IKcos(j3);
IkReal x354=IKsin(j3);
IkReal x355=((1.0)*cj5);
IkReal x356=(sj5*x353);
IkReal x357=(cj5*x353);
IkReal x358=((1.0)*x354);
IkReal x359=(x354*x355);
evalcond[0]=(((new_r02*x353))+((new_r12*x354)));
evalcond[1]=(((new_r01*x353))+sj5+((new_r11*x354)));
evalcond[2]=((((-1.0)*new_r02*x358))+((new_r12*x353)));
evalcond[3]=(((sj5*x354))+x357+new_r11);
evalcond[4]=((((-1.0)*x359))+x356+new_r01);
evalcond[5]=(sj5+(((-1.0)*new_r00*x358))+((new_r10*x353)));
evalcond[6]=(cj5+(((-1.0)*new_r01*x358))+((new_r11*x353)));
evalcond[7]=((((-1.0)*x359))+x356+new_r10);
evalcond[8]=((((-1.0)*x355))+((new_r10*x354))+((new_r00*x353)));
evalcond[9]=((((-1.0)*x353*x355))+new_r00+(((-1.0)*sj5*x358)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x361=IKPowWithIntegerCheck(sj4,-1);
if(!x361.valid){
continue;
}
IkReal x360=x361.value;
CheckValue<IkReal> x362=IKPowWithIntegerCheck(new_r11,-1);
if(!x362.valid){
continue;
}
if( IKabs((x360*(x362.value)*((((new_r01*new_r12))+(((-1.0)*sj4*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r12*x360)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x360*(x362.value)*((((new_r01*new_r12))+(((-1.0)*sj4*sj5))))))+IKsqr(((-1.0)*new_r12*x360))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x360*(x362.value)*((((new_r01*new_r12))+(((-1.0)*sj4*sj5))))), ((-1.0)*new_r12*x360));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[18];
IkReal x363=IKsin(j3);
IkReal x364=IKcos(j3);
IkReal x365=((1.0)*cj5);
IkReal x366=((1.0)*cj4);
IkReal x367=(new_r11*x364);
IkReal x368=(sj5*x364);
IkReal x369=(cj4*x364);
IkReal x370=(sj4*x364);
IkReal x371=(new_r00*x363);
IkReal x372=(cj4*x363);
IkReal x373=(new_r01*x363);
IkReal x374=(new_r02*x363);
IkReal x375=((1.0)*sj4*x363);
evalcond[0]=(x370+new_r12);
evalcond[1]=((((-1.0)*x375))+new_r02);
evalcond[2]=(((new_r02*x364))+((new_r12*x363)));
evalcond[3]=(sj5+((new_r01*x364))+((new_r11*x363)));
evalcond[4]=((((-1.0)*x374))+sj4+((new_r12*x364)));
evalcond[5]=(((cj5*x372))+x368+new_r01);
evalcond[6]=((((-1.0)*x365))+((new_r00*x364))+((new_r10*x363)));
evalcond[7]=(((sj5*x372))+(((-1.0)*x364*x365))+new_r00);
evalcond[8]=(((sj5*x363))+new_r11+(((-1.0)*x365*x369)));
evalcond[9]=((((-1.0)*x363*x365))+(((-1.0)*x366*x368))+new_r10);
evalcond[10]=((((-1.0)*x371))+(((-1.0)*sj5*x366))+((new_r10*x364)));
evalcond[11]=((((-1.0)*x373))+(((-1.0)*cj4*x365))+x367);
evalcond[12]=((((-1.0)*x366*x374))+((new_r22*sj4))+((new_r12*x369)));
evalcond[13]=((((-1.0)*new_r20*x366))+(((-1.0)*sj4*x371))+((new_r10*x370)));
evalcond[14]=(((sj4*x367))+(((-1.0)*sj4*x373))+(((-1.0)*new_r21*x366)));
evalcond[15]=((1.0)+((new_r12*x370))+(((-1.0)*new_r22*x366))+(((-1.0)*sj4*x374)));
evalcond[16]=((((-1.0)*sj5))+((new_r20*sj4))+(((-1.0)*x366*x371))+((new_r10*x369)));
evalcond[17]=((((-1.0)*x365))+((cj4*x367))+(((-1.0)*x366*x373))+((new_r21*sj4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x376=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x376.valid){
continue;
}
CheckValue<IkReal> x377 = IKatan2WithCheck(IkReal(new_r02),((-1.0)*new_r12),IKFAST_ATAN2_MAGTHRESH);
if(!x377.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x376.value)))+(x377.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[18];
IkReal x378=IKsin(j3);
IkReal x379=IKcos(j3);
IkReal x380=((1.0)*cj5);
IkReal x381=((1.0)*cj4);
IkReal x382=(new_r11*x379);
IkReal x383=(sj5*x379);
IkReal x384=(cj4*x379);
IkReal x385=(sj4*x379);
IkReal x386=(new_r00*x378);
IkReal x387=(cj4*x378);
IkReal x388=(new_r01*x378);
IkReal x389=(new_r02*x378);
IkReal x390=((1.0)*sj4*x378);
evalcond[0]=(x385+new_r12);
evalcond[1]=((((-1.0)*x390))+new_r02);
evalcond[2]=(((new_r12*x378))+((new_r02*x379)));
evalcond[3]=(sj5+((new_r01*x379))+((new_r11*x378)));
evalcond[4]=(((new_r12*x379))+sj4+(((-1.0)*x389)));
evalcond[5]=(x383+((cj5*x387))+new_r01);
evalcond[6]=(((new_r00*x379))+(((-1.0)*x380))+((new_r10*x378)));
evalcond[7]=(((sj5*x387))+(((-1.0)*x379*x380))+new_r00);
evalcond[8]=((((-1.0)*x380*x384))+((sj5*x378))+new_r11);
evalcond[9]=((((-1.0)*x381*x383))+(((-1.0)*x378*x380))+new_r10);
evalcond[10]=((((-1.0)*sj5*x381))+(((-1.0)*x386))+((new_r10*x379)));
evalcond[11]=(x382+(((-1.0)*x388))+(((-1.0)*cj4*x380)));
evalcond[12]=((((-1.0)*x381*x389))+((new_r12*x384))+((new_r22*sj4)));
evalcond[13]=((((-1.0)*sj4*x386))+(((-1.0)*new_r20*x381))+((new_r10*x385)));
evalcond[14]=((((-1.0)*sj4*x388))+((sj4*x382))+(((-1.0)*new_r21*x381)));
evalcond[15]=((1.0)+(((-1.0)*sj4*x389))+((new_r12*x385))+(((-1.0)*new_r22*x381)));
evalcond[16]=((((-1.0)*sj5))+((new_r20*sj4))+(((-1.0)*x381*x386))+((new_r10*x384)));
evalcond[17]=((((-1.0)*x381*x388))+(((-1.0)*x380))+((new_r21*sj4))+((cj4*x382)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - irb_120 (2293bc66b4066aefab42a6fd27269fed)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000048"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
